//===========================================================================
//
// This confidential and proprietary software may be used only as authorised
// by a licensing agreement from TC Applied Technologies Ltd.
//
// (C) COPYRIGHT 2004 TC Applied Technologies Ltd. (ALL RIGHTS RESERVED)
//
// Unauthorized use, duplication or distribution of this software is  
// strictly prohibited by law.
//
// The entire notice above must be reproduced on all authorised copies and
// copies may only be made to the extent permitted by a licensing agreement
// from TC Applied Technologies Ltd.
//
//===========================================================================
// $$
//===========================================================================
/****************************************************************************
	
	Purpose:	DICE routing defines used by the Dice Abstraction Layer API

	Revisions:
		created 24/02/2005 ml

****************************************************************************/

#ifndef _DAL_ROUTING_H_
#define _DAL_ROUTING_H_
#include "diceDefs.h"

#define TYPE_DESCR( type )  ((uint16)(type << 0))
#define DEV_DESCR( dev )   ((uint16)(dev << 2))
#define CH_DESCR( ch )    ((uint16)(ch << 8))

#define SRCROUTE(v) ((SRC_DESCRIPTION)((uint16)(v)))
#define DSTROUTE(v) ((DEST_DESCRIPTION)((uint16)(v)))

#define BLOCK_1_TYPE    0
#define BLOCK_2_TYPE    1
#define BLOCK_4_TYPE    2 //used for AVS Tx in High mode
#define BLOCK_8_TYPE    3 //used for AVS Tx in Low and Mid mode

// Routing rules
//   - When issuing a routing request the types of the source and destination much match
//   - The type must match the destination basic type (see below)
//     a) The requested type can not be smaller than the basic type
//     b) If the requested type is 2 the basic type must be two type 1 or one type 2.
//     c) If the requested type is 4 the basic type must be four type 1, two type 2 or one type 4
//     d) If the requested type is 8 the basic type must be 8x1, 4x2, 2x4 or 1x8
//   - The destination basic type varies over interface and rate mode
//     Rate mode = Low or Mid   High
//			AES		8x1			4x1
//			ADAT	8x1 (4x1)	2x1
//			TDIF	8x1			4x1
//			DSAIn	8x1			4x1
//			I2S0	8x1			4x1
//			I2S1	4x1			4x1
//			I2S2	4x1			4x1
//			APB		8x1			4x1
//			AVS1	8x1 1x8		4x1 1x4
//			AVS2	8x1	1x8		4x1 1x4
//
//   - The channel number is the logical number of the first channel in the block
//
//The practical upshot of this:
//	AVS can not be routed to AVS (who would need that?)
//	Any mono source can be routed to any destination extept:
//    - to AVS channels 9-16 in low-mid mode (only 8 blocks)
//	  - to AVS channels 5-8 in high mode (only 4 blocks)
//
// Routing definitions
// Routing RX entries
//  AES
//    low-mid mode
#define   RX_AES0_CHL   SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AES0_CHR   SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AES1_CHL   SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AES1_CHR   SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AES2_CHL   SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AES2_CHR   SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AES3_CHL   SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AES3_CHR   SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   RX_AES0_ST    SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_2_TYPE))
#define   RX_AES1_ST    SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_2_TYPE))
#define   RX_AES2_ST    SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_2_TYPE))
#define   RX_AES3_ST    SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_2_TYPE))

#define   RX_AES_CH0_7  SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))
#define   RX_AES_CH0_3  SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_AES_CH4_7  SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))

//    high mode (dual wire)
#define   RX_AES0_DW    SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AES1_DW    SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AES2_DW    SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AES3_DW    SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))

#define   RX_AES_DW_0_1 SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_2_TYPE))
#define   RX_AES_DW_2_3 SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_2_TYPE))
#define   RX_AES_DW_0_3 SRCROUTE(DEV_DESCR(DEV_AES_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))

//  ADAT
//    low-mid mode
#define   RX_ADAT_CH0    SRCROUTE(DEV_DESCR(DEV_ADAT_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_ADAT_CH1    SRCROUTE(DEV_DESCR(DEV_ADAT_RX) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_ADAT_CH2    SRCROUTE(DEV_DESCR(DEV_ADAT_RX) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_ADAT_CH3    SRCROUTE(DEV_DESCR(DEV_ADAT_RX) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_ADAT_CH4    SRCROUTE(DEV_DESCR(DEV_ADAT_RX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_ADAT_CH5    SRCROUTE(DEV_DESCR(DEV_ADAT_RX) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_ADAT_CH6    SRCROUTE(DEV_DESCR(DEV_ADAT_RX) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_ADAT_CH7    SRCROUTE(DEV_DESCR(DEV_ADAT_RX) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   RX_ADAT_CH0_3  SRCROUTE(DEV_DESCR(DEV_ADAT_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_ADAT_CH4_7  SRCROUTE(DEV_DESCR(DEV_ADAT_RX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))

#define   RX_ADAT_CH0_7  SRCROUTE(DEV_DESCR(DEV_ADAT_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

#define   RX_ADAT_SMUX_CH0    RX_ADAT_CH0
#define   RX_ADAT_SMUX_CH1    RX_ADAT_CH1
#define   RX_ADAT_SMUX_CH2    RX_ADAT_CH2
#define   RX_ADAT_SMUX_CH3    RX_ADAT_CH3

#define   RX_ADAT_SMUX_CH0_3  RX_ADAT_CH0_3

//    high mode
#define   RX_ADAT_SMUXX_CH0   SRCROUTE(DEV_DESCR(DEV_ADAT_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_ADAT_SMUXX_CH1   SRCROUTE(DEV_DESCR(DEV_ADAT_RX) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
          //special define to allow routing to a 4 block, channel 3 and 4 will be undefined
#define   RX_ADAT_SMUXX_XX    SRCROUTE(DEV_DESCR(DEV_ADAT_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))

//  TDIF
//    low-mid mode
#define   RX_TDIF_CH0    SRCROUTE(DEV_DESCR(DEV_TDIF_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_TDIF_CH1    SRCROUTE(DEV_DESCR(DEV_TDIF_RX) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_TDIF_CH2    SRCROUTE(DEV_DESCR(DEV_TDIF_RX) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_TDIF_CH3    SRCROUTE(DEV_DESCR(DEV_TDIF_RX) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_TDIF_CH4    SRCROUTE(DEV_DESCR(DEV_TDIF_RX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_TDIF_CH5    SRCROUTE(DEV_DESCR(DEV_TDIF_RX) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_TDIF_CH6    SRCROUTE(DEV_DESCR(DEV_TDIF_RX) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_TDIF_CH7    SRCROUTE(DEV_DESCR(DEV_TDIF_RX) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   RX_TDIF_CH0_3  SRCROUTE(DEV_DESCR(DEV_TDIF_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_TDIF_CH4_7  SRCROUTE(DEV_DESCR(DEV_TDIF_RX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_TDIF_CH0_7  SRCROUTE(DEV_DESCR(DEV_TDIF_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

//  I2S0
//    low-mid-high mode (in high only 1 to 4 available)
#define   RX_I2S0_CH0    SRCROUTE(DEV_DESCR(DEV_I2S_RX0) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_I2S0_CH1    SRCROUTE(DEV_DESCR(DEV_I2S_RX0) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_I2S0_CH2    SRCROUTE(DEV_DESCR(DEV_I2S_RX0) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_I2S0_CH3    SRCROUTE(DEV_DESCR(DEV_I2S_RX0) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_I2S0_CH4    SRCROUTE(DEV_DESCR(DEV_I2S_RX0) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_I2S0_CH5    SRCROUTE(DEV_DESCR(DEV_I2S_RX0) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_I2S0_CH6    SRCROUTE(DEV_DESCR(DEV_I2S_RX0) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_I2S0_CH7    SRCROUTE(DEV_DESCR(DEV_I2S_RX0) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   RX_I2S0_CH0_3  SRCROUTE(DEV_DESCR(DEV_I2S_RX0) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_I2S0_CH4_7  SRCROUTE(DEV_DESCR(DEV_I2S_RX0) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))

#define   RX_I2S0_CH0_7  SRCROUTE(DEV_DESCR(DEV_I2S_RX0) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

//  I2S1
//    low-mid-high mode
#define   RX_I2S1_CH0    SRCROUTE(DEV_DESCR(DEV_I2S_RX1) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_I2S1_CH1    SRCROUTE(DEV_DESCR(DEV_I2S_RX1) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_I2S1_CH2    SRCROUTE(DEV_DESCR(DEV_I2S_RX1) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_I2S1_CH3    SRCROUTE(DEV_DESCR(DEV_I2S_RX1) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))

#define   RX_I2S1_CH0_3  SRCROUTE(DEV_DESCR(DEV_I2S_RX1) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))

//  I2S2
//    low-mid-high mode
#define   RX_I2S2_CH0    SRCROUTE(DEV_DESCR(DEV_I2S_RX2) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_I2S2_CH1    SRCROUTE(DEV_DESCR(DEV_I2S_RX2) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_I2S2_CH2    SRCROUTE(DEV_DESCR(DEV_I2S_RX2) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_I2S2_CH3    SRCROUTE(DEV_DESCR(DEV_I2S_RX2) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))

#define   RX_I2S2_CH0_3  SRCROUTE(DEV_DESCR(DEV_I2S_RX2) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))

//  DSAI0
//    low-mid-high mode (in high only 1 to 4 available)
#define   RX_DSAI0_CH0    SRCROUTE(DEV_DESCR(DEV_DSAI_RX0) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI0_CH1    SRCROUTE(DEV_DESCR(DEV_DSAI_RX0) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI0_CH2    SRCROUTE(DEV_DESCR(DEV_DSAI_RX0) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI0_CH3    SRCROUTE(DEV_DESCR(DEV_DSAI_RX0) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI0_CH4    SRCROUTE(DEV_DESCR(DEV_DSAI_RX0) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI0_CH5    SRCROUTE(DEV_DESCR(DEV_DSAI_RX0) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI0_CH6    SRCROUTE(DEV_DESCR(DEV_DSAI_RX0) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI0_CH7    SRCROUTE(DEV_DESCR(DEV_DSAI_RX0) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   RX_DSAI0_CH0_3  SRCROUTE(DEV_DESCR(DEV_DSAI_RX0) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_DSAI0_CH4_7  SRCROUTE(DEV_DESCR(DEV_DSAI_RX0) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))

#define   RX_DSAI0_CH0_7  SRCROUTE(DEV_DESCR(DEV_DSAI_RX0) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

//  DSAI1
//    low-mid-high mode (in high only 1 to 4 available)
#define   RX_DSAI1_CH0    SRCROUTE(DEV_DESCR(DEV_DSAI_RX1) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI1_CH1    SRCROUTE(DEV_DESCR(DEV_DSAI_RX1) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI1_CH2    SRCROUTE(DEV_DESCR(DEV_DSAI_RX1) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI1_CH3    SRCROUTE(DEV_DESCR(DEV_DSAI_RX1) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI1_CH4    SRCROUTE(DEV_DESCR(DEV_DSAI_RX1) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI1_CH5    SRCROUTE(DEV_DESCR(DEV_DSAI_RX1) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI1_CH6    SRCROUTE(DEV_DESCR(DEV_DSAI_RX1) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI1_CH7    SRCROUTE(DEV_DESCR(DEV_DSAI_RX1) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   RX_DSAI1_CH0_3  SRCROUTE(DEV_DESCR(DEV_DSAI_RX1) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_DSAI1_CH4_7  SRCROUTE(DEV_DESCR(DEV_DSAI_RX1) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))

#define   RX_DSAI1_CH0_7  SRCROUTE(DEV_DESCR(DEV_DSAI_RX1) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

//  DSAI2
//    low-mid-high mode (in high only 1 to 4 available)
#define   RX_DSAI2_CH0    SRCROUTE(DEV_DESCR(DEV_DSAI_RX2) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI2_CH1    SRCROUTE(DEV_DESCR(DEV_DSAI_RX2) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI2_CH2    SRCROUTE(DEV_DESCR(DEV_DSAI_RX2) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI2_CH3    SRCROUTE(DEV_DESCR(DEV_DSAI_RX2) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI2_CH4    SRCROUTE(DEV_DESCR(DEV_DSAI_RX2) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI2_CH5    SRCROUTE(DEV_DESCR(DEV_DSAI_RX2) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI2_CH6    SRCROUTE(DEV_DESCR(DEV_DSAI_RX2) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI2_CH7    SRCROUTE(DEV_DESCR(DEV_DSAI_RX2) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   RX_DSAI2_CH0_3  SRCROUTE(DEV_DESCR(DEV_DSAI_RX2) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_DSAI2_CH4_7  SRCROUTE(DEV_DESCR(DEV_DSAI_RX2) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))

#define   RX_DSAI2_CH0_7  SRCROUTE(DEV_DESCR(DEV_DSAI_RX2) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

//  DSAI3
//    low-mid-high mode (in high only 1 to 4 available)
#define   RX_DSAI3_CH0    SRCROUTE(DEV_DESCR(DEV_DSAI_RX3) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI3_CH1    SRCROUTE(DEV_DESCR(DEV_DSAI_RX3) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI3_CH2    SRCROUTE(DEV_DESCR(DEV_DSAI_RX3) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI3_CH3    SRCROUTE(DEV_DESCR(DEV_DSAI_RX3) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI3_CH4    SRCROUTE(DEV_DESCR(DEV_DSAI_RX3) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI3_CH5    SRCROUTE(DEV_DESCR(DEV_DSAI_RX3) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI3_CH6    SRCROUTE(DEV_DESCR(DEV_DSAI_RX3) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_DSAI3_CH7    SRCROUTE(DEV_DESCR(DEV_DSAI_RX3) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   RX_DSAI3_CH0_3  SRCROUTE(DEV_DESCR(DEV_DSAI_RX3) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_DSAI3_CH4_7  SRCROUTE(DEV_DESCR(DEV_DSAI_RX3) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))

#define   RX_DSAI3_CH0_7  SRCROUTE(DEV_DESCR(DEV_DSAI_RX3) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

//  ARM
//    low-mid-high mode (in high only 1 to 4 available)
#define   RX_ARM_CH0      SRCROUTE(DEV_DESCR(DEV_APB_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_ARM_CH1      SRCROUTE(DEV_DESCR(DEV_APB_RX) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_ARM_CH2      SRCROUTE(DEV_DESCR(DEV_APB_RX) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_ARM_CH3      SRCROUTE(DEV_DESCR(DEV_APB_RX) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_ARM_CH4      SRCROUTE(DEV_DESCR(DEV_APB_RX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_ARM_CH5      SRCROUTE(DEV_DESCR(DEV_APB_RX) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_ARM_CH6      SRCROUTE(DEV_DESCR(DEV_APB_RX) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_ARM_CH7      SRCROUTE(DEV_DESCR(DEV_APB_RX) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   RX_ARM_CH0_3    SRCROUTE(DEV_DESCR(DEV_APB_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_ARM_CH4_7    SRCROUTE(DEV_DESCR(DEV_APB_RX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))

#define   RX_ARM_CH0_7    SRCROUTE(DEV_DESCR(DEV_APB_RX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

//  AVS1
//    low-mid-high mode (in high only 1 to 8 available)
#define   RX_AVS1_CH0     SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS1_CH1     SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS1_CH2     SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS1_CH3     SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS1_CH4     SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS1_CH5     SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS1_CH6     SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS1_CH7     SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS1_CH8     SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID8) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS1_CH9     SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID9) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS1_CH10    SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID10) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS1_CH11    SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID11) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS1_CH12    SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID12) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS1_CH13    SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID13) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS1_CH14    SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID14) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS1_CH15    SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID15) | TYPE_DESCR(BLOCK_1_TYPE))

#define   RX_AVS1_CH0_3   SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_AVS1_CH4_7   SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_AVS1_CH0_7   SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))
#define   RX_AVS1_CH8_11  SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID8) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_AVS1_CH8_15  SRCROUTE(DEV_DESCR(DEV_AVS_ADO1) | CH_DESCR(CH_ID8) | TYPE_DESCR(BLOCK_8_TYPE))

//  AVS2
//    low-mid-high mode (in high only 1 to 8 available)
#define   RX_AVS2_CH0     SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS2_CH1     SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS2_CH2     SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS2_CH3     SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS2_CH4     SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS2_CH5     SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS2_CH6     SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS2_CH7     SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS2_CH8     SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID8) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS2_CH9     SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID9) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS2_CH10    SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID10) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS2_CH11    SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID11) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS2_CH12    SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID12) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS2_CH13    SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID13) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS2_CH14    SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID14) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS2_CH15    SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID15) | TYPE_DESCR(BLOCK_1_TYPE))

#define   RX_AVS2_CH0_3   SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_AVS2_CH4_7   SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_AVS2_CH0_7   SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))
#define   RX_AVS2_CH8_11  SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID8) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_AVS2_CH8_15  SRCROUTE(DEV_DESCR(DEV_AVS_ADO2) | CH_DESCR(CH_ID8) | TYPE_DESCR(BLOCK_8_TYPE))

//  AVS3
//    low-mid-high mode (in high only 1 to 8 available)
#define   RX_AVS3_CH0     SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS3_CH1     SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS3_CH2     SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS3_CH3     SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS3_CH4     SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS3_CH5     SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS3_CH6     SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS3_CH7     SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS3_CH8     SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID8) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS3_CH9     SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID9) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS3_CH10    SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID10) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS3_CH11    SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID11) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS3_CH12    SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID12) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS3_CH13    SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID13) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS3_CH14    SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID14) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS3_CH15    SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID15) | TYPE_DESCR(BLOCK_1_TYPE))

#define   RX_AVS3_CH0_3   SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_AVS3_CH4_7   SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_AVS3_CH0_7   SRCROUTE(DEV_DESCR(DEV_AVS_ADO3) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

//  AVS4
//    low-mid-high mode (in high only 1 to 8 available)
#define   RX_AVS4_CH0     SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS4_CH1     SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS4_CH2     SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS4_CH3     SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS4_CH4     SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS4_CH5     SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS4_CH6     SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS4_CH7     SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS4_CH8     SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID8) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS4_CH9     SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID9) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS4_CH10    SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID10) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS4_CH11    SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID11) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS4_CH12    SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID12) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS4_CH13    SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID13) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS4_CH14    SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID14) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_AVS4_CH15    SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID15) | TYPE_DESCR(BLOCK_1_TYPE))

#define   RX_AVS4_CH0_3   SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_AVS4_CH4_7   SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_AVS4_CH0_7   SRCROUTE(DEV_DESCR(DEV_AVS_ADO4) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))


//	Not routed (muted)
#define   RX_MUTED_CH     SRCROUTE(DEV_DESCR(DEV_MUTED) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   RX_MUTED_ST     SRCROUTE(DEV_DESCR(DEV_MUTED) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_2_TYPE))
#define   RX_MUTED_4CH    SRCROUTE(DEV_DESCR(DEV_MUTED) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   RX_MUTED_8CH    SRCROUTE(DEV_DESCR(DEV_MUTED) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

// Routing TX entries
//  AES
//    low-mid mode
#define   TX_AES0_CHL   DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AES0_CHR   DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AES1_CHL   DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AES1_CHR   DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AES2_CHL   DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AES2_CHR   DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AES3_CHL   DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AES3_CHR   DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   TX_AES0_ST    DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_2_TYPE))
#define   TX_AES1_ST    DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_2_TYPE))
#define   TX_AES2_ST    DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_2_TYPE))
#define   TX_AES3_ST    DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_2_TYPE))

#define   TX_AES_CH0_7  DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))
#define   TX_AES_CH0_3  DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   TX_AES_CH4_7  DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))

//    high mode (dual wire)
#define   TX_AES0_DW    DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AES1_DW    DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AES2_DW    DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AES3_DW    DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))

#define   TX_AES_DW_0_1 DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_2_TYPE))
#define   TX_AES_DW_2_3 DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_2_TYPE))
#define   TX_AES_DW_0_3 DSTROUTE(DEV_DESCR(DEV_AES_TX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))

//  ADAT
//    low-mid mode
#define   TX_ADAT_CH0    DSTROUTE(DEV_DESCR(DEV_ADAT_TX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_ADAT_CH1    DSTROUTE(DEV_DESCR(DEV_ADAT_TX) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_ADAT_CH2    DSTROUTE(DEV_DESCR(DEV_ADAT_TX) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_ADAT_CH3    DSTROUTE(DEV_DESCR(DEV_ADAT_TX) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_ADAT_CH4    DSTROUTE(DEV_DESCR(DEV_ADAT_TX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_ADAT_CH5    DSTROUTE(DEV_DESCR(DEV_ADAT_TX) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_ADAT_CH6    DSTROUTE(DEV_DESCR(DEV_ADAT_TX) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_ADAT_CH7    DSTROUTE(DEV_DESCR(DEV_ADAT_TX) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   TX_ADAT_CH0_3  DSTROUTE(DEV_DESCR(DEV_ADAT_TX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   TX_ADAT_CH4_7  DSTROUTE(DEV_DESCR(DEV_ADAT_TX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))

#define   TX_ADAT_CH0_7  DSTROUTE(DEV_DESCR(DEV_ADAT_TX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

#define   TX_ADAT_SMUX_CH0    TX_ADAT_CH0
#define   TX_ADAT_SMUX_CH1    TX_ADAT_CH1
#define   TX_ADAT_SMUX_CH2    TX_ADAT_CH2
#define   TX_ADAT_SMUX_CH3    TX_ADAT_CH3

#define   TX_ADAT_SMUX_CH0_3  TX_ADAT_CH0_3

//    high mode
#define   TX_ADAT_SMUXX_CH0   DSTROUTE(DEV_DESCR(DEV_ADAT_TX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_ADAT_SMUXX_CH1   DSTROUTE(DEV_DESCR(DEV_ADAT_TX) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))

//  TDIF
//    low-mid mode
#define   TX_TDIF_CH0    DSTROUTE(DEV_DESCR(DEV_TDIF_TX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_TDIF_CH1    DSTROUTE(DEV_DESCR(DEV_TDIF_TX) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_TDIF_CH2    DSTROUTE(DEV_DESCR(DEV_TDIF_TX) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_TDIF_CH3    DSTROUTE(DEV_DESCR(DEV_TDIF_TX) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_TDIF_CH4    DSTROUTE(DEV_DESCR(DEV_TDIF_TX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_TDIF_CH5    DSTROUTE(DEV_DESCR(DEV_TDIF_TX) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_TDIF_CH6    DSTROUTE(DEV_DESCR(DEV_TDIF_TX) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_TDIF_CH7    DSTROUTE(DEV_DESCR(DEV_TDIF_TX) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   TX_TDIF_CH0_3  DSTROUTE(DEV_DESCR(DEV_TDIF_TX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   TX_TDIF_CH4_7  DSTROUTE(DEV_DESCR(DEV_TDIF_TX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))
#define   TX_TDIF_CH0_7  DSTROUTE(DEV_DESCR(DEV_TDIF_TX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

//  I2S0
//    low-mid-high mode (in high only 1 to 4 available)
#define   TX_I2S0_CH0    DSTROUTE(DEV_DESCR(DEV_I2S_TX0) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_I2S0_CH1    DSTROUTE(DEV_DESCR(DEV_I2S_TX0) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_I2S0_CH2    DSTROUTE(DEV_DESCR(DEV_I2S_TX0) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_I2S0_CH3    DSTROUTE(DEV_DESCR(DEV_I2S_TX0) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_I2S0_CH4    DSTROUTE(DEV_DESCR(DEV_I2S_TX0) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_I2S0_CH5    DSTROUTE(DEV_DESCR(DEV_I2S_TX0) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_I2S0_CH6    DSTROUTE(DEV_DESCR(DEV_I2S_TX0) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_I2S0_CH7    DSTROUTE(DEV_DESCR(DEV_I2S_TX0) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   TX_I2S0_CH0_3  DSTROUTE(DEV_DESCR(DEV_I2S_TX0) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   TX_I2S0_CH4_7  DSTROUTE(DEV_DESCR(DEV_I2S_TX0) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))

#define   TX_I2S0_CH0_7  DSTROUTE(DEV_DESCR(DEV_I2S_TX0) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

//  I2S1
//    low-mid-high mode
#define   TX_I2S1_CH0    DSTROUTE(DEV_DESCR(DEV_I2S_TX1) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_I2S1_CH1    DSTROUTE(DEV_DESCR(DEV_I2S_TX1) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_I2S1_CH2    DSTROUTE(DEV_DESCR(DEV_I2S_TX1) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_I2S1_CH3    DSTROUTE(DEV_DESCR(DEV_I2S_TX1) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))

#define   TX_I2S1_CH0_3  DSTROUTE(DEV_DESCR(DEV_I2S_TX1) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))

//  I2S2
//    low-mid-high mode
#define   TX_I2S2_CH0    DSTROUTE(DEV_DESCR(DEV_I2S_TX2) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_I2S2_CH1    DSTROUTE(DEV_DESCR(DEV_I2S_TX2) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_I2S2_CH2    DSTROUTE(DEV_DESCR(DEV_I2S_TX2) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_I2S2_CH3    DSTROUTE(DEV_DESCR(DEV_I2S_TX2) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))

#define   TX_I2S2_CH0_3  DSTROUTE(DEV_DESCR(DEV_I2S_TX2) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))

//  DSAI0
//    low-mid-high mode (in high only 1 to 4 available)
#define   TX_DSAI0_CH0    DSTROUTE(DEV_DESCR(DEV_DSAI_TX0) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI0_CH1    DSTROUTE(DEV_DESCR(DEV_DSAI_TX0) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI0_CH2    DSTROUTE(DEV_DESCR(DEV_DSAI_TX0) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI0_CH3    DSTROUTE(DEV_DESCR(DEV_DSAI_TX0) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI0_CH4    DSTROUTE(DEV_DESCR(DEV_DSAI_TX0) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI0_CH5    DSTROUTE(DEV_DESCR(DEV_DSAI_TX0) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI0_CH6    DSTROUTE(DEV_DESCR(DEV_DSAI_TX0) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI0_CH7    DSTROUTE(DEV_DESCR(DEV_DSAI_TX0) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   TX_DSAI0_CH0_3  DSTROUTE(DEV_DESCR(DEV_DSAI_TX0) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   TX_DSAI0_CH4_7  DSTROUTE(DEV_DESCR(DEV_DSAI_TX0) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))

#define   TX_DSAI0_CH0_7  DSTROUTE(DEV_DESCR(DEV_DSAI_TX0) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

//  DSAI1
//    low-mid-high mode (in high only 1 to 4 available)
#define   TX_DSAI1_CH0    DSTROUTE(DEV_DESCR(DEV_DSAI_TX1) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI1_CH1    DSTROUTE(DEV_DESCR(DEV_DSAI_TX1) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI1_CH2    DSTROUTE(DEV_DESCR(DEV_DSAI_TX1) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI1_CH3    DSTROUTE(DEV_DESCR(DEV_DSAI_TX1) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI1_CH4    DSTROUTE(DEV_DESCR(DEV_DSAI_TX1) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI1_CH5    DSTROUTE(DEV_DESCR(DEV_DSAI_TX1) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI1_CH6    DSTROUTE(DEV_DESCR(DEV_DSAI_TX1) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI1_CH7    DSTROUTE(DEV_DESCR(DEV_DSAI_TX1) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   TX_DSAI1_CH0_3  DSTROUTE(DEV_DESCR(DEV_DSAI_TX1) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   TX_DSAI1_CH4_7  DSTROUTE(DEV_DESCR(DEV_DSAI_TX1) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))

#define   TX_DSAI1_CH0_7  DSTROUTE(DEV_DESCR(DEV_DSAI_TX1) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

//  DSAI2
//    low-mid-high mode (in high only 1 to 4 available)
#define   TX_DSAI2_CH0    DSTROUTE(DEV_DESCR(DEV_DSAI_TX2) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI2_CH1    DSTROUTE(DEV_DESCR(DEV_DSAI_TX2) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI2_CH2    DSTROUTE(DEV_DESCR(DEV_DSAI_TX2) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI2_CH3    DSTROUTE(DEV_DESCR(DEV_DSAI_TX2) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI2_CH4    DSTROUTE(DEV_DESCR(DEV_DSAI_TX2) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI2_CH5    DSTROUTE(DEV_DESCR(DEV_DSAI_TX2) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI2_CH6    DSTROUTE(DEV_DESCR(DEV_DSAI_TX2) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI2_CH7    DSTROUTE(DEV_DESCR(DEV_DSAI_TX2) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   TX_DSAI2_CH0_3  DSTROUTE(DEV_DESCR(DEV_DSAI_TX2) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   TX_DSAI2_CH4_7  DSTROUTE(DEV_DESCR(DEV_DSAI_TX2) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))

#define   TX_DSAI2_CH0_7  DSTROUTE(DEV_DESCR(DEV_DSAI_TX2) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

//  DSAI3
//    low-mid-high mode (in high only 1 to 4 available)
#define   TX_DSAI3_CH0    DSTROUTE(DEV_DESCR(DEV_DSAI_TX3) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI3_CH1    DSTROUTE(DEV_DESCR(DEV_DSAI_TX3) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI3_CH2    DSTROUTE(DEV_DESCR(DEV_DSAI_TX3) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI3_CH3    DSTROUTE(DEV_DESCR(DEV_DSAI_TX3) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI3_CH4    DSTROUTE(DEV_DESCR(DEV_DSAI_TX3) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI3_CH5    DSTROUTE(DEV_DESCR(DEV_DSAI_TX3) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI3_CH6    DSTROUTE(DEV_DESCR(DEV_DSAI_TX3) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_DSAI3_CH7    DSTROUTE(DEV_DESCR(DEV_DSAI_TX3) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   TX_DSAI3_CH0_3  DSTROUTE(DEV_DESCR(DEV_DSAI_TX3) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   TX_DSAI3_CH4_7  DSTROUTE(DEV_DESCR(DEV_DSAI_TX3) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))

#define   TX_DSAI3_CH0_7  DSTROUTE(DEV_DESCR(DEV_DSAI_TX3) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

//  ARM
//    low-mid-high mode (in high only 1 to 4 available)
#define   TX_ARM_CH0      DSTROUTE(DEV_DESCR(DEV_APB_TX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_ARM_CH1      DSTROUTE(DEV_DESCR(DEV_APB_TX) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_ARM_CH2      DSTROUTE(DEV_DESCR(DEV_APB_TX) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_ARM_CH3      DSTROUTE(DEV_DESCR(DEV_APB_TX) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_ARM_CH4      DSTROUTE(DEV_DESCR(DEV_APB_TX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_ARM_CH5      DSTROUTE(DEV_DESCR(DEV_APB_TX) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_ARM_CH6      DSTROUTE(DEV_DESCR(DEV_APB_TX) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_ARM_CH7      DSTROUTE(DEV_DESCR(DEV_APB_TX) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   TX_ARM_CH0_3    DSTROUTE(DEV_DESCR(DEV_APB_TX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   TX_ARM_CH4_7    DSTROUTE(DEV_DESCR(DEV_APB_TX) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))

#define   TX_ARM_CH0_7    DSTROUTE(DEV_DESCR(DEV_APB_TX) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))

//  AVS1
//    low-mid-high mode (in high only 1 to 8 available)
#define   TX_AVS1_CH0     DSTROUTE(DEV_DESCR(DEV_AVS_ADI1) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AVS1_CH1     DSTROUTE(DEV_DESCR(DEV_AVS_ADI1) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AVS1_CH2     DSTROUTE(DEV_DESCR(DEV_AVS_ADI1) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AVS1_CH3     DSTROUTE(DEV_DESCR(DEV_AVS_ADI1) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AVS1_CH4     DSTROUTE(DEV_DESCR(DEV_AVS_ADI1) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AVS1_CH5     DSTROUTE(DEV_DESCR(DEV_AVS_ADI1) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AVS1_CH6     DSTROUTE(DEV_DESCR(DEV_AVS_ADI1) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AVS1_CH7     DSTROUTE(DEV_DESCR(DEV_AVS_ADI1) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

#define   TX_AVS1_CH0_3   DSTROUTE(DEV_DESCR(DEV_AVS_ADI1) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   TX_AVS1_CH4_7   DSTROUTE(DEV_DESCR(DEV_AVS_ADI1) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))
#define   TX_AVS1_CH0_7   DSTROUTE(DEV_DESCR(DEV_AVS_ADI1) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))
#define   TX_AVS1_CH8_15  DSTROUTE(DEV_DESCR(DEV_AVS_ADI1) | CH_DESCR(CH_ID8) | TYPE_DESCR(BLOCK_8_TYPE))

//  AVS2
//    low-mid-high mode (in high only 1 to 8 available)
#define   TX_AVS2_CH0     DSTROUTE(DEV_DESCR(DEV_AVS_ADI2) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AVS2_CH1     DSTROUTE(DEV_DESCR(DEV_AVS_ADI2) | CH_DESCR(CH_ID1) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AVS2_CH2     DSTROUTE(DEV_DESCR(DEV_AVS_ADI2) | CH_DESCR(CH_ID2) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AVS2_CH3     DSTROUTE(DEV_DESCR(DEV_AVS_ADI2) | CH_DESCR(CH_ID3) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AVS2_CH4     DSTROUTE(DEV_DESCR(DEV_AVS_ADI2) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AVS2_CH5     DSTROUTE(DEV_DESCR(DEV_AVS_ADI2) | CH_DESCR(CH_ID5) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AVS2_CH6     DSTROUTE(DEV_DESCR(DEV_AVS_ADI2) | CH_DESCR(CH_ID6) | TYPE_DESCR(BLOCK_1_TYPE))
#define   TX_AVS2_CH7     DSTROUTE(DEV_DESCR(DEV_AVS_ADI2) | CH_DESCR(CH_ID7) | TYPE_DESCR(BLOCK_1_TYPE))

//    low-mid-high mode (in high only 1 to 8 available)
#define   TX_AVS2_CH0_3   DSTROUTE(DEV_DESCR(DEV_AVS_ADI2) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_4_TYPE))
#define   TX_AVS2_CH4_7   DSTROUTE(DEV_DESCR(DEV_AVS_ADI2) | CH_DESCR(CH_ID4) | TYPE_DESCR(BLOCK_4_TYPE))
#define   TX_AVS2_CH0_7   DSTROUTE(DEV_DESCR(DEV_AVS_ADI2) | CH_DESCR(CH_ID0) | TYPE_DESCR(BLOCK_8_TYPE))
#define   TX_AVS2_CH8_15  DSTROUTE(DEV_DESCR(DEV_AVS_ADI2) | CH_DESCR(CH_ID8) | TYPE_DESCR(BLOCK_8_TYPE))

//Receiver device channel capabilities in normal and high mode
const uint8 RX_DEV_CHANNELS[NUM_DEVICES_RX][2] =
{
	{8,4},  //DEV_AES_RX
	{8,2},  //DEV_ADAT_RX
	{8,4},  //DEV_TDIF_RX
	{8,4},  //DEV_DSAI_RX0
	{8,4},  //DEV_DSAI_RX1
	{8,4},  //DEV_DSAI_RX2
	{8,4},  //DEV_DSAI_RX3
	{8,4},  //DEV_I2S_RX0
	{4,4},  //DEV_I2S_RX1
	{4,4},  //DEV_I2S_RX2
	{8,4},  //DEV_APB_RX
	{16,8}, //DEV_AVS_ADO1
	{16,8}, //DEV_AVS_ADO2
	{16,8}, //DEV_AVS_ADO3
	{16,8}  //DEV_AVS_ADO4
};

//Transmitter device channel capabilities in normal and high mode
const uint8 TX_DEV_CHANNELS[NUM_DEVICES_TX][2] =
{
	{8,4},  //DEV_AES_TX
	{8,2},  //DEV_ADAT_TX
	{8,4},  //DEV_TDIF_TX
	{8,4},  //DEV_DSAI_TX0
	{8,4},  //DEV_DSAI_TX1
	{8,4},  //DEV_DSAI_TX2
	{8,4},  //DEV_DSAI_TX3
	{8,4},  //DEV_I2S_TX0
	{4,4},  //DEV_I2S_TX1
	{4,4},  //DEV_I2S_TX2
	{8,4},  //DEV_APB_TX
	{16,8}, //DEV_AVS_ADI1
	{16,8}  //DEV_AVS_ADI2
};




// Routing sample latencies

#if defined(AVS_USE_SYT32)
#define DICE_RX_DUALWIRE_LATENCY			0
#define DICE_TX_DUALWIRE_LATENCY			0
#else
#define DICE_RX_DUALWIRE_LATENCY			4
#define DICE_TX_DUALWIRE_LATENCY			4
#endif


#define DICE_RX_AES_ROUTE_LATENCY_LOW		5
#define DICE_RX_AES_ROUTE_LATENCY_MID		5
#define DICE_RX_AES_ROUTE_LATENCY_HIGH		(5 + DICE_RX_DUALWIRE_LATENCY)

#define DICE_RX_INS_ROUTE_LATENCY_LOW		5
#define DICE_RX_INS_ROUTE_LATENCY_MID		5
#define DICE_RX_INS_ROUTE_LATENCY_HIGH		(5 + DICE_RX_DUALWIRE_LATENCY)

#define DICE_RX_AVS_ROUTE_LATENCY_LOW		2
#define DICE_RX_AVS_ROUTE_LATENCY_MID		2
#define DICE_RX_AVS_ROUTE_LATENCY_HIGH		(2 + DICE_RX_DUALWIRE_LATENCY)


#define DICE_TX_AES_ROUTE_LATENCY_LOW		4
#define DICE_TX_AES_ROUTE_LATENCY_MID		4
#define DICE_TX_AES_ROUTE_LATENCY_HIGH		(4 + DICE_TX_DUALWIRE_LATENCY)

#define DICE_TX_INS_ROUTE_LATENCY_LOW		4
#define DICE_TX_INS_ROUTE_LATENCY_MID		4
#define DICE_TX_INS_ROUTE_LATENCY_HIGH		(4 + DICE_TX_DUALWIRE_LATENCY)

#define DICE_TX_AVS_ROUTE_LATENCY_LOW		1
#define DICE_TX_AVS_ROUTE_LATENCY_MID		1
#define DICE_TX_AVS_ROUTE_LATENCY_HIGH		(1 + DICE_TX_DUALWIRE_LATENCY)



#endif //_DAL_ROUTING_H_

