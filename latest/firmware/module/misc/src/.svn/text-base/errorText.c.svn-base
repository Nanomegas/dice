//===========================================================================
//
// This confidential and proprietary software may be used only as authorised
// by a licensing agreement from TC Applied Technologies Ltd.
//
// (C) COPYRIGHT 2004 TC Applied Technologies Ltd. (ALL RIGHTS RESERVED)
//
// Unauthorized use, duplication or distribution of this software is  
// strictly prohibited by law.
//
// The entire notice above must be reproduced on all authorised copies and
// copies may only be made to the extent permitted by a licensing agreement
// from TC Applied Technologies Ltd.
//
/****************************************************************************
 * DESCRIPTION: ErrorCode text strings

	Purpose:	Provide text strings for all the hResult values
	
	Revisions:
		created 04/23/2002 lm

****************************************************************************/

#include "stdio.h"
#include "TCTypes.h"
#include "ErrorCodes.h"
#include "ErrorText.h"

#if defined (_DICE2) || defined (_DICEJR)
#include "Dice2ErrorCodes.h"
#endif

/* define a macro to help us turn HRESULT values into text */
#define	E_CASE(a) case a: return(#a);

static char	errorBuf[10] ;

char *errorText (HRESULT value)
{
	switch (value)
	{
		E_CASE(NO_ERROR);

		E_CASE(E_BAD_INPUT_PARAMETERS);
		E_CASE(E_ASSERT_FAILED);
		E_CASE(E_NOT_IMPLEMENTED);
		E_CASE(E_CALLBACK_REQUEST_FAILED);
		E_CASE(E_NOT_INITIALIZED);
		E_CASE(E_FAIL);
		E_CASE(E_VERIFY_FAILED);
		E_CASE(E_EOF);
		E_CASE(E_UNREACHABLE_CODE_REACHED);
		E_CASE(E_UNKNOWN);
		E_CASE(E_QUEUE_FULL);
		E_CASE(E_NULL_PTR);
		E_CASE(E_SIZE_TOO_BIG);

		E_CASE(E_NCI_PACKET_NOT_SELFID);
		E_CASE(E_NCI_ID_SEQ_ERROR_0);
		E_CASE(E_NCI_PACKET0_FORMAT_ERROR);
		E_CASE(E_NCI_EXT_SELFID_ERROR);
		E_CASE(E_NCI_NODE_SEQ_ERROR);
		E_CASE(E_NCI_NO_CONTENDERS);
		E_CASE(E_NCI_NODE_COUNT_ERROR);
		E_CASE(E_NCI_ROOT_HAS_PARENTS);
		E_CASE(E_NCI_NODE0_HAS_KIDS);
		E_CASE(E_NCI_TOO_MANY_PARENTS);
		E_CASE(E_NCI_BAD_TOPOLOGY_MAP);
		E_CASE(E_NCI_INVALID_NODE_TREE);
		E_CASE(E_NCI_ZERO_INFO_LENGTH);
		E_CASE(E_NCI_NODE_ID_OUT_OF_RANGE);
		E_CASE(E_NCI_NODE_INFO_NOT_AVAILABLE);
		E_CASE(E_NCI_SID_INFO_NOT_AVAILABLE);
		E_CASE(E_NCI_BUS_INFO_NOT_AVAILABLE);
		E_CASE(E_NCI_CREATE_HANDLE_FAILED);
		E_CASE(E_NCI_CLOSE_HANDLE_FAILED);
		E_CASE(E_NCI_HANDLE_INVALID_ENTRY);
		E_CASE(E_NCI_HANDLE_NOT_FOUND);
		E_CASE(E_NCI_OUT_OF_HANDLES);
		E_CASE(E_NCI_INVALID_SPEED);

		E_CASE(E_LAL_ALREADY_INITIALIZED);
		E_CASE(E_LAL_UNMAPPED_ERROR);
		E_CASE(E_LAL_TOO_MANY_CALLBACKS);
		E_CASE(E_LAL_GENERIC_FAILURE);
		E_CASE(E_LAL_INVALID_REQUEST);
		E_CASE(E_LAL_WWWUID_INVALID);
		E_CASE(E_LAL_WWWUID_NOTFOUND);
		E_CASE(E_LAL_HANDLE_INVALID);
		E_CASE(E_LAL_HANDLE_NOTOPEN);
		E_CASE(E_LAL_SPEEDMAP_ERROR);
		E_CASE(E_LAL_NUM_DESTINATIONS_ERROR);
		E_CASE(E_LAL_RESPONSE_UNEXPECTED);
		E_CASE(E_LAL_RESPONSE_CONFLICT);
		E_CASE(E_LAL_RESPONSE_DATAERR);
		E_CASE(E_LAL_TYPEERR);
		E_CASE(E_LAL_RESPONSE_ADDRERR);
		E_CASE(E_LAL_RESPONSE_ZERO_DATA);
		E_CASE(E_LAL_RESPONSE_TIMEOUT);
		E_CASE(E_LAL_REQUEST_TIMEOUT);
		E_CASE(E_LAL_LOCK_COMPARE_SWAP_FAIL);
		E_CASE(E_LAL_ISOALLOCRES_MEM_FAIL);
		E_CASE(E_LAL_SPEED_NOT_AVAIL);
		E_CASE(E_LAL_INVALID_ADDR_RNG);
		E_CASE(E_LAL_INTERNAL_DEV_OPEN);
		E_CASE(E_LAL_INTERNAL_DEV_ADDR);
		E_CASE(E_LAL_INTERNAL_CSR_INIT);
		E_CASE(E_LAL_INTERNAL_CSC_SPACE);
		E_CASE(E_LAL_BANDWIDTH_INVALID);
		E_CASE(E_LAL_BANDWIDTH_UNAVAIL);
		E_CASE(E_LAL_CHANNEL_INVALID);
		E_CASE(E_LAL_CHANNEL_UNAVAIL);
		E_CASE(E_LAL_ISO_PCL_MEMORY_FAIL);
		E_CASE(E_LAL_ISO_SCATTERLOCK_FAIL);
		E_CASE(E_LAL_ISO_RESOURCE_INVALID);
		E_CASE(E_LAL_DMA_CHAN_NOT_FOUND);
		E_CASE(E_LAL_TRANSMISSION_FAILURE);
		E_CASE(E_LAL_BUS_RESET_IN_PROGRESS);
		E_CASE(E_LAL_INTERFACE_NOT_INITIALIZED);
		E_CASE(E_LAL_OHCI_COULDNOT_CREATE_WINDOW);
		E_CASE(E_LAL_ADDR_RNG_NOT_FOUND);
		E_CASE(E_LAL_ADDR_RNG_CONFLICT);
		E_CASE(E_LAL_INVALID_PB);
		E_CASE(E_LAL_UNKNOWN_MAX_REC);

		E_CASE(E_PB_BAD_PACKET_BLOCK_PTR);
		E_CASE(E_PB_TRAP_LIST_FULL);
		E_CASE(E_PB_PAYLOAD_TOO_LARGE);
		E_CASE(E_PB_DIFFERENT_PAYLOAD_SIZES);
		E_CASE(E_PB_INVALID_SPEED_CODE);
		E_CASE(E_PB_TR_INVALID_HANDLE);
		E_CASE(E_PB_TR_TIMEOUT);
		E_CASE(E_PB_TR_ACK_ERROR);
		E_CASE(E_PB_TR_ACK_PENDING);
		E_CASE(E_PB_INVALID_Q_SPECIFIED);

		E_CASE(E_BRI_NOT_INITIALIZED_FATAL);
		E_CASE(E_BRI_NOT_INITIALIZED_OK);
		E_CASE(E_BRI_ALREADY_INITIALIZED);
		E_CASE(E_BRI_TOO_MANY_CBS);
		E_CASE(E_BRI_TIMEOUT);
		E_CASE(E_BRI_TIMEOUT_RESET_STORM);
		E_CASE(E_BRI_NEW_BUS_RESET);

		E_CASE(E_LHL_MODULE_INIT_ERROR);
		E_CASE(E_LHL_SELF_ID_DATA_ERROR);
		E_CASE(E_LHL_SELF_ID_INVERSE_ERROR);
		E_CASE(E_LHL_SELF_ID_TOO_MANY);
		E_CASE(E_LHL_SELF_ID_ACK_ERROR);
		E_CASE(E_LHL_SELF_ID_NONE);
		E_CASE(E_LHL_SELF_ID_TIMEOUT);
		E_CASE(E_LHL_SELF_ID_INTERRUPTED);
		E_CASE(E_LHL_SELF_ID_CYCLESTART_IN_SID);
		E_CASE(E_LHL_DATA_NOT_SELFID);
		E_CASE(E_LHL_UNEXPECTED_SID_DATA);
		E_CASE(E_LHL_CYMAS_NODEISROOT);
		E_CASE(E_LHL_CYMAS_NODENOTROOT);
		E_CASE(E_LHL_CYMAS_INVALID_ARG);
		E_CASE(E_LHL_CABLE_LOOP_DETECTED);
		E_CASE(E_LHL_NODEID_NOT_AVAIL);
		E_CASE(E_LHL_PHY_ADDR_ERROR);
		E_CASE(E_LHL_PHY_POLL_TIMEOUT);
		E_CASE(E_LHL_PHY_IO_ERROR);
		E_CASE(E_LHL_RX_EVENT_GROUP_ERROR);
		E_CASE(E_LHL_TX_EVENT_GROUP_ERROR);
		E_CASE(E_LHL_SEMAPHORE_CREATE_ERROR);
		E_CASE(E_LHL_Q_CREATE_ERROR);
		E_CASE(E_LHL_WD_CREATE_ERROR);
		E_CASE(E_LHL_UNSUPPORTED_TCODE);
		E_CASE(E_LHL_RREQ_RD_ERROR);
		E_CASE(E_LHL_RRSP_RD_ERROR);
		E_CASE(E_LHL_NO_REQ_DATA);
		E_CASE(E_LHL_NO_RSP_DATA);
		E_CASE(E_LHL_PACKET_RX_ERROR);
		E_CASE(E_LHL_INVALID_REQ_ADDR);
		E_CASE(E_LHL_INVALID_RSP_ADDR);
		E_CASE(E_LHL_PACKET_TOO_LARGE);
		E_CASE(E_LHL_INVALID_SIZE);
		E_CASE(E_LHL_PB_CREATE_ERROR);
		E_CASE(E_LHL_INVALID_PB);
		E_CASE(E_LHL_TX_REQQ_XFER_ERROR);
		E_CASE(E_LHL_TX_RSPQ_XFER_ERROR);
		E_CASE(E_LHL_TX_INVALID_HEADER);
		E_CASE(E_LHL_TX_INVALID_PAYLOAD);
		E_CASE(E_LHL_TX_INVALID_PACKET);
		E_CASE(E_LHL_TX_PACKET_AGED_OUT);
		E_CASE(E_LHL_UNKNOWN_RX_EVENT);
		E_CASE(E_LHL_INVALID_Q);
		E_CASE(E_LHL_UNKNOWN_CONF);
		E_CASE(E_LHL_TLABEL_MISMATCH);
		E_CASE(E_LHL_OUT_OF_PENDING_REQS);
		E_CASE(E_LHL_PENDING_REQ_NOT_FOUND);
		E_CASE(E_LHL_PENDING_FOUND_CONTINUE);
		E_CASE(E_LHL_NODE_NOT_FOUND);
		E_CASE(E_LHL_ASYNC_READ_FAILURE);
		E_CASE(E_LHL_ASYNC_WRITE_FAILURE);
		E_CASE(E_LHL_ASYNC_LOCK_FAILURE);
		E_CASE(E_LHL_ASYNC_STREAM_FAILURE);
		E_CASE(E_LHL_UNSUPPORTED_LOCK_TYPE);
		E_CASE(E_LHL_ASYNC_READ_RSP_FAILURE);
		E_CASE(E_LHL_ASYNC_WRITE_RSP_FAILURE);
		E_CASE(E_LHL_ASYNC_LOCK_RSP_FAILURE);
		E_CASE(E_LHL_ASYNC_ERROR_RSP_FAILURE);
		E_CASE(E_LHL_INVALID_BROADCAST);
		E_CASE(E_LHL_AUTH_EVENT_GROUP_ERROR);
		E_CASE(E_LHL_AUTH_HW_TIMEOUT);
		E_CASE(E_LHL_AUTH_INVALID_SIGNATURE);
		E_CASE(E_LHL_AUTH_ILLEGAL_SIGNATURE);
		E_CASE(E_LHL_AUTH_RETRYSIGN);
		E_CASE(E_LHL_PENDING_TX_INTERRUPTED);
		E_CASE(E_LHL_BUS_RESET_IN_PROGRESS);
		E_CASE(E_LHL_WRONG_PACKET_TYPE);
		E_CASE(E_LHL_STATUSINFO_UNDEF);
		
		E_CASE(E_LHL_RSP_BASE);
		E_CASE(E_LHL_RSP_CONFLICT);
		E_CASE(E_LHL_RSP_DATAERR);
		E_CASE(E_LHL_RSP_TYPEERR);
		E_CASE(E_LHL_RSP_ADDRERR);

		E_CASE(E_MPM_REQ_SIZE_TOO_LARGE);
		E_CASE(E_MPM_NO_BLOCK_AVAILABLE);
		E_CASE(E_MPM_GUARD_BAND_VIOLATION);
		E_CASE(E_MPM_BAD_BLOCK_SIZE);
		E_CASE(E_MPM_BAD_HEADER_SIZE);
		E_CASE(E_MPM_DESCRIPTOR_ORDER);

		E_CASE(E_KV_BADKEYVALUE);
		E_CASE(E_KV_ILLEGALKEY);

		E_CASE(E_CLI_OUTOFSPACE);
		E_CASE(E_CLI_DUPLICATECOMMAND);
		E_CASE(E_CLI_BADARGUMENTS);
		E_CASE(E_CLI_BADCONSTANTS);
		E_CASE(E_CLI_BADCONTEXT);
		E_CASE(E_CLI_BADDESCRIPTORTYPE);
		E_CASE(E_CLI_BADDESCRIPTORNAME);
		E_CASE(E_CLI_BADDESCRIPTORFUNCTION);
		E_CASE(E_CLI_TOOFEWARGUMENTS);
		E_CASE(E_CLI_TOOMANYARGUMENTS);
		E_CASE(E_CLI_INVALIDARGUMENTS);
		E_CASE(E_CLI_INVALIDARGUMENTTYPE);
		E_CASE(E_CLI_INVALIDRANGE);
		E_CASE(E_CLI_BADOPERATION);
		E_CASE(E_CLI_UNKNOWNCOMMAND);
	
		E_CASE(E_SEMAPHORE_OPEN_ERROR);
		E_CASE(E_SEMAPHORE_CLOSE_ERROR);
		E_CASE(E_SEMAPHORE_ID_NOT_VALID);
		E_CASE(E_SEMAPHORE_TIMEOUT);

		E_CASE(E_MSGQUEUE_OPEN_ERROR);
		E_CASE(E_MSGQUEUE_CLOSE_ERROR);
		E_CASE(E_MSGQUEUE_ID_NOT_VALID);
		E_CASE(E_MSGQUEUE_TIMEOUT);
		E_CASE(E_MSGQUEUE_FULL);
		E_CASE(E_MSGQUEUE_EMPTY);

		E_CASE(E_LOCK_TYPE_NOT_IMPLEMENTED);
		E_CASE(E_LOCK_TYPE_NOT_ALLOWED);
		E_CASE(E_LOCK_TYPE_INVALID);
		E_CASE(E_LOCK_TRANSACTION_INVALID);
		E_CASE(E_LOCK_COMPARE_SWAP_FAIL);

		E_CASE(E_IRM_INSUFFICIENT_BANDWIDTH);
		E_CASE(E_IRM_CHANNEL_OUT_OF_RANGE);
		E_CASE(E_IRM_CHANNEL_NOT_ALLOCATED);
		E_CASE(E_IRM_CHANNEL_NOT_AVAILABLE);
		E_CASE(E_IRM_NO_CHANNEL_AVAILABLE);
		E_CASE(E_IRM_BUS_MANAGER_ALREADY_SET);
		
		E_CASE(E_CMP_PCR_INVALID);
		E_CASE(E_CMP_PCR_BUSY);
		E_CASE(E_CMP_PCR_NOT_CONNECTED);
		E_CASE(E_CMP_PCR_ALREADY_CONNECTED);

		E_CASE(E_OHCI_DMA_ALLOCATE_DESC_ERR);
		E_CASE(E_OHCI_DMA_RELEASE_DESC_ERR);
		E_CASE(E_OHCI_DMA_ALLOCATE_DATA_ERR);
		E_CASE(E_OHCI_DMA_RELEASE_DATA_ERR);
		E_CASE(E_OHCI_ARDMA_INVALID_DESC);
		E_CASE(E_OHCI_ARDMA_CONTEXT_DEAD);
		E_CASE(E_OHCI_ARDMA_BAD_EVENT_CODE);
		E_CASE(E_OHCI_ARDMA_INACTIVE_TIMEOUT);
		E_CASE(E_OHCI_ATDMA_INVALID_DESC);
		E_CASE(E_OHCI_ATDMA_CONTEXT_DEAD);
		E_CASE(E_OHCI_ATDMA_NO_MORE_DONE);
		E_CASE(E_OHCI_ATDMA_INACTIVE_TIMEOUT);
		E_CASE(E_OHCI_INTEVENT_CB_ERR);
		E_CASE(E_OHCI_INTEVENT_CB_RANGE_ERR);
		E_CASE(E_OHCI_COMPARE_AND_SWAP_ERR);
		E_CASE(E_OHCI_INVALID_VENDORID);
		E_CASE(E_OHCI_INVALID_DEVICEID);
		E_CASE(E_OHCI_SELFID_ERR);
		E_CASE(E_OHCI_SELFID_GEN_ERR);
		E_CASE(E_OHCI_NODEID_ERR);
		E_CASE(E_OHCI_CSR_POLL_TIMEOUT);
		E_CASE(E_OHCI_LOCKRESPERR);
		E_CASE(E_OHCI_REQACCESSFAIL);
		E_CASE(E_OHCI_CYCLELOST);
		E_CASE(E_OHCI_CYCLETOOLONG);
		E_CASE(E_OHCI_ADDR_RANGE);
		E_CASE(E_OHCI_SOFT_RESET_TIMEOUT);

		E_CASE(E_TXPPCORE_DATA_ERROR);
		E_CASE(E_TXPPCORE_TYPE_ERROR);
		E_CASE(E_TXPPCORE_ADDR_ERROR);
		E_CASE(E_TXPPCORE_LOCK_ERROR);
		E_CASE(E_TXPPCORE_STATUS_ERROR);
		
		E_CASE(E_TEST_PCORE_SET_COMMAND_FAIL);
		E_CASE(E_TEST_PCORE_SUSPEND_FAIL);
		E_CASE(E_TEST_PCORE_RESUME_FAIL);
		E_CASE(E_TEST_PCORE_INTERNAL_ERROR);
		E_CASE(E_TEST_PCORE_RUN_TEST_ERROR);

		E_CASE(E_DEBUGPCORE_WRONG_TESTDATA);
		E_CASE(E_DEBUGPCORE_ADDRESS_RANGE);
		E_CASE(E_DEBUGPCORE_NOT_CONNECTED);

		E_CASE(E_AVS_NO_PARTIONS_FREE);
		E_CASE(E_AVS_INVALID_PLUGID);
		E_CASE(E_AVS_INVALID_FORMAT);
		E_CASE(E_AVS_INVALID_PARTITION);

		E_CASE(E_DTCP_SIGNATURE_INVALID);
		E_CASE(E_DTCP_ECC_POINT_AT_INF);
		E_CASE(E_DTCP_ECC_BUSY);
		E_CASE(E_DTCP_ECC_ZERO_OPERAND);
		E_CASE(E_DTCP_ECC_REL_PRIME);

		E_CASE(E_AKE_BAD_STATUS);
		E_CASE(E_AKE_CANCEL_PROC);
		E_CASE(E_AKE_STOP_AKE);
		E_CASE(E_AKE_DEVICE_ALREADY_AT_MAX_USE);
		E_CASE(E_AKE_NODE_NOT_INUSE);
		E_CASE(E_AKE_IGNORED_STATUS);
		E_CASE(E_AKE_EXPECT_SRM_RESP);
		E_CASE(E_AKE_UNKNOWN_SUBFUNCTION);
		E_CASE(E_AKE_UNSUPPORTED_STATUS);
		E_CASE(E_AKE_PARSE_DATA_ERROR);
		E_CASE(E_AKE_SIZE_ERROR);
		E_CASE(E_AKE_AUTH_ERROR);
		E_CASE(E_AKE_STATE_ERROR);

#if defined (_DICE2) || defined (_DICEJR)

		E_CASE(E_LLC_WRONG_VERSION);
		E_CASE(E_LLC_HOST_ACC_ERR);
		E_CASE(E_LLC_NODE_ID_INVALID);
		E_CASE(E_LLC_CABLE_PWR_ERROR);
		E_CASE(E_LLC_INTEVENT_CB_ERR);
		E_CASE(E_LLC_INTEVENT_CB_RANGE_ERR);
		E_CASE(E_LLC_INT_HDR_ERR);
		E_CASE(E_LLC_INT_TCODE_ERR);
		E_CASE(E_LLC_INT_INVALID_ACK);
		E_CASE(E_LLC_INT_CYCLOST);
		E_CASE(E_LLC_INT_CYCCRCERR);
		E_CASE(E_LLC_INT_CYCARBFAIL);
		E_CASE(E_LLC_INT_CYCTOOLONG);
		E_CASE(E_LLC_INVALID_NODE_ID);
		E_CASE(E_LLC_NODE_ID_NOT_OVER);
		E_CASE(E_LLC_ROOT_ID_NOT_OVER);
		E_CASE(E_LLC_ROOT_ID_ERR);
		E_CASE(E_LLC_NODE_ID_ERR);
		E_CASE(E_LLC_CABLE_LOOP);
		E_CASE(E_LLC_SELF_ID_INCR_ERR);
		E_CASE(E_LLC_SELF_ID_PAR_ERR);
		E_CASE(E_LLC_SELF_ID_RX_FAIL);
		E_CASE(E_LLC_BUS_ERROR);
		E_CASE(E_LLC_BUS_RESET_CNT_ERR);
		E_CASE(E_LLC_HEADER_ERR);
		E_CASE(E_LLC_TCODE_ERR);
		E_CASE(E_LLC_ASY_DATA_ERR);
		E_CASE(E_LLC_INC_SEC_COUNT);
		E_CASE(E_LLC_CY_TOO_LONG);
		E_CASE(E_LLC_CY_LOST);
		E_CASE(E_LLC_ISO_TX_ERR);
		E_CASE(E_LLC_ISO_RX_ERR);
		E_CASE(E_LLC_HOST_ACSS_ERR);
		E_CASE(E_LLC_NO_BUS_GRANT);
		E_CASE(E_LLC_ABORT_TRANSMISSION);
		E_CASE(E_LLC_TX_NEVER_COMPLETED);
		E_CASE(E_LLC_RX_OVERFLOW);
		E_CASE(E_LLC_TX_OVERFLOW);
		E_CASE(E_LLC_AR_NO_MORE_DATA);
		E_CASE(E_LLC_ERROR_EVENT_CODE);

		E_CASE(E_TX_INVALID_TASKID);
		E_CASE(E_TX_INVALID_SEMAID);
		E_CASE(E_TX_NOMORE_FREE_SEMA);
		E_CASE(E_TX_ERROR_RESET_SEMA);
		E_CASE(E_TX_CREATE_TASK);
#endif

	}

	errorBuf[0] = 0;

	return errorBuf;
}	
