//===========================================================================
//
// This confidential and proprietary software may be used only as authorised
// by a licensing agreement from TC Applied Technologies Ltd.
//
// (C) COPYRIGHT 2004 TC Applied Technologies Ltd. (ALL RIGHTS RESERVED)
//
// Unauthorized use, duplication or distribution of this software is  
// strictly prohibited by law.
//
// The entire notice above must be reproduced on all authorised copies and
// copies may only be made to the extent permitted by a licensing agreement
// from TC Applied Technologies Ltd.
//
/****************************************************************************

 DESCRIPTION: 
	This describes the registration handler for the AV/C Security Handler. 

  Revisions:
		created 21/03/2003 KBJ/LM

****************************************************************************/
#ifndef	_AVCSECURITY_H
#define _AVCSECURITY_H

#include "TCTypes.h"
#include "ErrorCodes.h"
#include "avcDefs.h"
#include "avcHand.h"
#include "keyvalue.h"
#include "listmanager.h"

//	MACROS

#define		ORIGINATORID_CLIENT(category) ( ((uint32)category)<<24 & 0x01);
#define		ORIGINATORID_SHIM  (category) ( ((uint32)category)<<24);

//	SECURITY MESSAGES

/*
	EXTERNAL MESSAGES
	
	These messages are posted by external sources.
*/

#define		kSMM_BusReset				0x00000002		// BusReset
														
#define		kSMM_Timeout				0x00FF0004		// The context timed out while waiting for a
														// response.

#define		kSMM_AVCPacketReceived		0x00FF0007		// Message routed to the shim. 

/*	
	SECURITY MANAGER MESSAGES

	These messages are generated by the security manager,
	though external messages also are sent by the Security Manager 
	to the Shim and the Client.
*/

#define		kSMBaseClientMessageID		0xFF000000		// Use this for internal messages inside of a client or a shim.
														
#define		kSMM_ClientPacket			0x00FF0011		// Sent to the client when an AV/C, unpacked packet is received. 
								
#define		kSMM_Result					0x00000001		// Result packet, received from the security manager once a 
														// a request from the client or shim has been fulfilled.
/*	kSMM_Result
	fields:
		context=ORIGINALLY SPECIFIED CONTEXT, IF ANY;
		datatype=ORIGINAL REQUEST MESSAGE
		data=returned data, if any.
*/

#define		kSMM_Error					0x00000000		// Passed when an error message is generated.
/*  kSMM_Error
	fields:
		context=ORIGINALLY SPECIFIED CONTEXT, IF ANY;
		datatype=ORIGINAL REQUEST MESSAGE
		data=error message, stored as a long in the void*.
*/

/*
	Messages from the client or the shim
*/

#define		kSMM_ReleaseContext			0x00FF0021		// Releases a context.
/*
	kSMM_ReleaseContext
	fields:
		context=0;
		datatype=0;
		data=context*;
		
		this releases a context id.  If the context id is not in use, then this
		does nothing.  
		
	Results:
		The response message is returned.
*/

#define		kSMM_CreateContext			0x00FF0031		//	Creates a context.
/*
	kSMM_CreateContext
	fields:
		context=0;
		datatype=label;
		data=packetBlock;
		
	The field label is the unique label that defines this context, it is generated by
	the creator.
	
	this attempts to create a new context.  The packetBlock field is just a typical 
	DH_PB*.
	
	Results
		data=context*
		
		The context* requires that the creator fill out these fields:
			initiator;
			index 
*/

#define		kSMM_SendPacket				0x00000004		// Sends a packet to the other node. 
/*
	kSMM_SendPacket
	fields:
		context=context;
		datatype=specific data type;
		data=pointer to unpacked structure.;
		
	datatype contains the type of the data structure specified in the data field.
	data contains a pointer to a data structure used by the specific authentication
	     type.
	
	Results
		No fields are changed in the result of a completed SendPacket.
*/

//	MESSAGES FROM CLIENT

#define		kSMM_RegisterClient			0x00FF001C		// Registers a client.
/*  kSMM_RegisterClient
	fields:
		context=0;	
		datatype=category;
		data=callback
	
		category is the AV/C security specified category.
		callback is a function pointer to the clients smMessageCallback function.
	results:
		You will receive back a result message, without any data,
		this means that the client was successfully registered.
*/
#define		kSMM_UnRegisterClient		0x00FF001D		// UnRegisters a client.
/*  kSMM_UnRegisterClient
	fields:
		context=0;	
		datatype=category;
		data=0;
	
		category is the AV/C security specified category.
	results:
		You will receive back a result message, without any data,
		this means that the client was successfully unregistered.
*/

//	MESSAGE FROM SHIM

#define		kSMM_SetTimeout				0x00FF000A		// Sets the timeout timer and starts the countdown.
/*
	kSMM_SetTimeout
	fields:
		context=0;
		datatype=0;
		data=timeoutdelay;
		
		timeoutdelay is a number in milliseconds, which must go by without a CancelTimeout
		message being posted.  Otherwise a Timeout message will be sent to the client.
		
	Results:
		The result message sent back in reply is empty.  
*/
		
#define		kSMM_CancelTimeout			0x00FF000C		// Cancels the timeout timer.
/*
	kSMM_CancelTimeout
	fields:
		context=0;
		datatype=0;
		data=0;
		
		This message just cancels the timeout timer. If the timeout timer has
		already expired then this is just ignored.
		
	Results:
		The result message sent back for this is empty.  It doesn't contain
		any data.  
*/

#define		kSMM_LookupContext			0x00FF0020		// Looks a up context using the context label.
/*
	kSMM_LookupContext
	fields:
		context=0;
		datatype=0;
		data=context*;
		
		contextid is a unique identifier which specifies a particular transaction.
			many packet types will contain a unique identifier, which will require
			this to be a label.
			
	Results:
		the result message sent back contains the requested context, in the 
		data field.  If an error occurred then the error message is sent back instead.
*/

#define		kSMM_SendAVCPacket			0x00FF000B		// Sends the AVC Packet specified.
/*
	kSMM_SendAVCPacket
	fields:
		context=contextptr
		datatype=0
		data=packetBlock*
		
		The packet block is just a pointer to a real packetBlock*
	results:
		If the packet was able to be sent, then a standard kSMM_Result message is returned.
		Otherwise an error message is returned.
*/

#define		kSMM_SendToClient			0x00000009		// Sends packet to the client.
/* kSMM_SendToClient
   fields:
   		context=valid context
   		datatype=packettype
   		data=unpacked data pointer
   result:
   		if the message was rerouted to the client correctly, then the security manager
   		returns a standard kSMM_Result message.
*/

#define		kSMM_RegisterShim			0x00FF001A		// Registers the shim with the SecurityManager.
/*	kSMM_RegisterShim 
	fields:
		context=0;	
		datatype=category;
		data=callback
	
		category is the AV/C security specified category.
		callback is a function pointer to the clients smMessageCallback function.
	results:
		You will receive back a result message, without any data,
		this means that the client was successfully registered.
*/
	
#define		kSMM_UnRegisterShim			0x00FF001B
/*	kSMM_UnRegisterShim
	fields:
		context=0;	
		datatype=category;
		data=0;
	
		category is the AV/C security specified category.
	results:
		You will receive back a result message, without any data,
		this means that the client was successfully unregistered.
*/

//	Initiator Defines

#define	kSMM_ContextInitiatedRemote		0x00
#define kSMM_ContextInitiatedLocal		0x01

//	Messaging Structs

// CONTEXT
// This is used to store a context for use by the client and shim.
typedef	struct
{
	uint32		category;	// Filled in by the generic header parser.
	uint32		smlabel;	// Filled in by the securitymanager.
	NODEHANDLE	nodehandle;
	uint32		initiator;		// Where did this context originate from? A packet or a local thing?
	//KBJ??? TX_TIMER	timer;
	uint32		client_done;	// True when the client is completely done with this context. 
	uint32		shim_done;		// True when the shim is completely done with this context.
	uint32		uniquelabel; // storage of the unique label id, used in AV/C Packets
	uint32		smstate;	 // State of the security manager, for this context.
	uint32		field[10];
} smContext;

// This is the messaging struct which gets passed between the shim, client, and security manager.
typedef	struct
{
	uint32		message;
	uint32		originator;	// Handle representing the message sender.
	smContext*	context;
	uint32		datatype;
	void*		data; 
} smMessage;

//	Procedure declaration for security message clients.

typedef		HRESULT  (*smMessageCallback)(smMessage*	message);

// This is the registration structure, which is used to map shims and clients in the 
// the security manager.
typedef	struct
{
	uint32				category;
	smMessageCallback*	shim;
	smMessageCallback*  client;
} smCategoryRegistration;

// message entry point
HRESULT	smPostMessage(smMessage*	message);

//  Initialization
HRESULT	smInitialize(void);

// Thread entry point
void smThreadEntryPoint(uint32 thread_input);

#endif // _AVCSECURITY_H

