#!/usr/bin/env python
##==============================================================================
##
## This confidential and proprietary software may be used only as authorised
## by a licensing agreement from TC Applied Technologies Ltd.
##
## (C) COPYRIGHT 2009-2010 TC Applied Technologies Ltd. (ALL RIGHTS RESERVED)
##
## Unauthorized use, duplication or distribution of this software is  
## strictly prohibited by law.
##
## The entire notice above must be reproduced on all authorised copies and
## copies may only be made to the extent permitted by a licensing agreement
## from TC Applied Technologies Ltd.
##
##==============================================================================

import sys, os, os.path, time
if sys.hexversion < 0x020400F0:
	print "error: this script requires Python 2.4 or higher"
	sys.exit( 1 )
import optparse, xml.dom.minidom, urllib2


kVersionStr = "1.0.2"

kFileHeader = """///////////////////////////////////////////////////////////////////////////////
//
// This confidential and proprietary software may be used only as authorised
// by a licensing agreement from TC Applied Technologies Ltd.
//
// (C) COPYRIGHT 2008-%s TC Applied Technologies Ltd. (ALL RIGHTS RESERVED)
//
// Unauthorized use, duplication or distribution of this software is  
// strictly prohibited by law.
//
// The entire notice above must be reproduced on all authorised copies and
// copies may only be made to the extent permitted by a licensing agreement
// from TC Applied Technologies Ltd.
//
///////////////////////////////////////////////////////////////////////////////
//
//         ****** DO NOT EDIT THIS FILE ******
//
// This file is auto-generated by a script.
//
// Generated on :  %s
// From XML file:  %s
//
///////////////////////////////////////////////////////////////////////////////

"""



def getSupportAttributeEnumStr( valueStr ):
	if valueStr == "0":
		return "FW_INTERFACES_SUPPORT_LEVEL_NONE"
	elif valueStr == "1":
		return "FW_INTERFACES_SUPPORT_LEVEL_FULL"
	elif valueStr == "2":
		return "FW_INTERFACES_SUPPORT_LEVEL_LIMITED"
	elif valueStr.lower() == "ffff":
		return "FW_INTERFACES_SUPPORT_LEVEL_UNKNOWN"
	else:
		print "ERROR: unknown controller support field value \"%s\"" % (valueStr)
		sys.exit( 1 )


def getMaxSpeedAttributeEnumStr ( valueStr ):
	if valueStr == "100":
		return "FW_INTERFACES_MAX_SPEED_S100"
	elif valueStr == "200":
		return "FW_INTERFACES_MAX_SPEED_S200"
	elif valueStr == "400":
		return "FW_INTERFACES_MAX_SPEED_S400"
	elif valueStr == "800":
		return "FW_INTERFACES_MAX_SPEED_S800"
	elif valueStr.lower() == "0":
		return "FW_INTERFACES_MAX_SPEED_UNKNOWN"
	else:
		print "ERROR: unknown controller max speed field value \"%s\"" % (valueStr)
		sys.exit( 1 )


def main():
	parser = optparse.OptionParser( "usage: %prog [options] xmlInputFileOrURL headerOutputFile", version=kVersionStr )
	parser.add_option('-d', '--debug', action="store_true", dest="debug", default=False, help="verbose debug output")
	parser.add_option('-q', '--quiet', action="store_true", dest="quiet", default=False, help="quiet output (no message if input file URL cannot be retrieved)")
	parser.add_option('-v', '--verbose', action="store_true", dest="verbose", default=False, help="verbose output")
	global options
	options, args = parser.parse_args()

	if len( args ) != 2:
		parser.print_help()
		sys.exit( 1 )

	xmlInputFilePath = args[0]
	headerOutputFilePath = args[1]

	if xmlInputFilePath == "OHCI1394DB_URL":
		# retrieve the input file URL from the environment variable
		try:
			xmlInputFilePath = os.environ["OHCI1394DB_URL"]
		except:
			xmlInputFilePath = None

		if not xmlInputFilePath:
			print "skipped update of \"%s\" because the requested OHCI1394DB_URL environment variable is not set" % (headerOutputFilePath)
			sys.exit( 0 )

	if xmlInputFilePath.startswith( "http" ):
		print "Retrieving the URL \"%s\"..." % (xmlInputFilePath)

		successful = False
		numRetries = 0
		if not options.quiet:
			try:
				numRetries = int( os.environ["OHCI1394DB_RETRIES"] )
				if numRetries < 0:
					numRetries = 0
			except:
				pass

		while True:
			try:
				webpage = urllib2.urlopen( xmlInputFilePath )
				xmlInputFileText = webpage.read()
				successful = True
			except urllib2.HTTPError, e:
				if numRetries == 0:
					if options.quiet:
						sys.exit( 0 )
					print "error: cannot retrieve the specified URL:  HTTP Error Code %s" % (str(e.code))
				else:
					print "warning: cannot retrieve the specified URL:  HTTP Error Code %s" % (str(e.code))
			except urllib2.URLError, e:
				if numRetries == 0:
					if options.quiet:
						sys.exit( 0 )
					print "error: cannot retrieve the specified URL: " + e.reason[1]
				else:
					print "warning: cannot retrieve the specified URL: " + e.reason[1]
			except:
				raise

			if successful:
				break
			else:
				if numRetries == 0:
					sys.exit( 1 )

				print "waiting 30 seconds before retrying..."
				try:
					time.sleep( 30 )
				except:
					sys.exit( 2 )
				numRetries = numRetries - 1
	else:
		if not os.path.isfile( xmlInputFilePath ):
			print "ERROR: the file \"%s\" does not exist" % (xmlInputFilePath)
			sys.exit( 1 )
		xmlInputFile = open( xmlInputFilePath, 'r' )
		xmlInputFileText = xmlInputFile.read()
		xmlInputFile.close()

	print "Parsing..."
	try:
		xmldoc = xml.dom.minidom.parseString( xmlInputFileText )
	except:
		print "ERROR: an exception occurred while parsing the XML from %s" % (xmlInputFilePath)
		raise

	headerOutputFileTextLines = []
	# start with a header
	timeStamp = time.localtime( time.time() )
	headerOutputFileTextLines.append( kFileHeader % (time.strftime('%Y', timeStamp), time.strftime('%b %d %H:%M:%S %Y', timeStamp), xmlInputFilePath) )
	# struct header
	headerOutputFileTextLines.append( "const VENDOR_INFO vendors[] =" )
	headerOutputFileTextLines.append( "{" )

	# parse the XML
	ohci1394devicesNode = xmldoc.childNodes[1]

	firstManufacturerCommentFound = False

	if options.debug:
		print "----------------------------------------"
	for controllerNode in ohci1394devicesNode.childNodes:
		if controllerNode.nodeType == controllerNode.COMMENT_NODE:
			if options.debug:
				print "found comment node:  \"%s\"" % str( controllerNode.data ).strip()
			if firstManufacturerCommentFound:
				headerOutputFileTextLines.append( "" )
			firstManufacturerCommentFound = True
			headerOutputFileTextLines.append( "\t// %s" % str( controllerNode.data ).strip() )
		elif controllerNode.nodeType == controllerNode.TEXT_NODE:
			if options.debug:
				print "skipping text node"
			continue
		elif controllerNode.nodeType == controllerNode.ELEMENT_NODE:
			if options.debug:
				print "found element node:  \"%s\"" % (controllerNode.tagName)
			textLine = "\t{"
			addComma = False
			if controllerNode.tagName == "controller":
				if options.verbose:
					vendorNameStr = controllerNode.getElementsByTagName( "vendorname" )[0].firstChild.nodeValue
					chipsetStr = controllerNode.getElementsByTagName( "chipset" )[0].firstChild.nodeValue
					print '  processing controller "%s %s"' % (vendorNameStr, chipsetStr)

				# the order in which the XML controller attributes correspond to the VENDOR_INFO struct fields
				structFieldAttributes = [ "vendorid", "deviceid", "maxtx", "maxrx", "vendorname", "chipset", "maxspeed", "notes", "support" ]

				for attributeName in structFieldAttributes:
					attributeNode = controllerNode.getElementsByTagName( attributeName )[0]
					if attributeNode.firstChild:
						valueText = attributeNode.firstChild.nodeValue
					else:
						valueText = ""

					if options.debug:
						print "%s : \"%s\"" % (attributeNode.nodeName, valueText)

					if addComma:
						textLine = textLine + ','
					addComma = True

					if attributeNode.tagName == "support":
						textLine = textLine + ' %s' % (getSupportAttributeEnumStr( valueText  ))
					elif attributeNode.tagName == "maxspeed":
						textLine = textLine + ' %s' % (getMaxSpeedAttributeEnumStr( valueText  ))
					else:
						# escape any backspace characters for C/C++ compatibility
						valueText = valueText.replace( "\\", "\\\\" )
						textLine = textLine + ' TEXT("%s")' % (valueText)
			textLine = textLine + " },"
			headerOutputFileTextLines.append( textLine )
		else:
			print "unsupported node type:", controllerNode.nodeType
			continue

		if options.debug:
			print "----------------------------------------"

	# add a null entry at the end
	if firstManufacturerCommentFound:
		headerOutputFileTextLines.append( "" )
	headerOutputFileTextLines.append( "\t{ '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', '\\0', FW_INTERFACES_SUPPORT_LEVEL_UNKNOWN }" )

	# struct end
	headerOutputFileTextLines.append( "};" )
	headerOutputFileTextLines.append( "" )

	# write out the header file
	headerOutputFile = open( headerOutputFilePath, 'w' )
	headerOutputFile.write( "\n".join( headerOutputFileTextLines ) )
	headerOutputFile.close()

	print "Done"



if __name__ == '__main__':
	main()
