<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
	<head>
		<title>Platform Abstraction Layer API Documentation</title>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<link href="doxygen.css" rel="stylesheet" type="text/css">
	</head>
	<body>
		<table width="100%" border="0" cellspacing="0" cellpadding="0">
			<tr>
				<td><img src="images/TCAT.gif" width="399" height="64"></td>
				<td align="right">
					<div align="left">
						</div>
				</td>
				<td align="right">
					<div align="right">
						<b><font face="Verdana, Arial, Helvetica, sans-serif"><img src="images/dice_logo.gif" width="120" height="50"></font></b></div>
				</td>
			</tr>
		</table>
		<hr size="1">
	</body>
</html>
<!-- Generated by Doxygen 1.6.3 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.html"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>tcat_dice_pal.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">//==============================================================================</span>
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// This confidential and proprietary software may be used only as authorised</span>
<a name="l00004"></a>00004 <span class="comment">// by a licensing agreement from TC Applied Technologies Ltd.</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// (C) COPYRIGHT 2004 - 2012 TC Applied Technologies Ltd. (ALL RIGHTS RESERVED)</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Unauthorized use, duplication or distribution of this software is  </span>
<a name="l00009"></a>00009 <span class="comment">// strictly prohibited by law.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// The entire notice above must be reproduced on all authorised copies and</span>
<a name="l00012"></a>00012 <span class="comment">// copies may only be made to the extent permitted by a licensing agreement</span>
<a name="l00013"></a>00013 <span class="comment">// from TC Applied Technologies Ltd.</span>
<a name="l00014"></a>00014 <span class="comment">//</span>
<a name="l00015"></a>00015 <span class="comment">//==============================================================================</span>
<a name="l00016"></a>00016 <span class="comment">//</span>
<a name="l00017"></a>00017 <span class="comment">//  dice platform abstraction layer</span>
<a name="l00018"></a>00018 <span class="comment">//</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#pragma once</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &quot;../../interface/tcat.h&quot;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;../../interface/tcat_dice_defaults.h&quot;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;../interface/tcat_dice.h&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;tcat_exception.h&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;deque&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#define kTCAT_DICE_OHCI_RETRY_TIMEOUT   1000</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#define kTCAT_DICE_OHCI_RETRY_DELAY     25</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 
<a name="l00036"></a>00036 <span class="comment">//</span>
<a name="l00037"></a>00037 <span class="comment">//  debugging</span>
<a name="l00038"></a>00038 <span class="comment">//</span>
<a name="l00040"></a>00040 <span class="comment"></span>
<a name="l00041"></a>00041 <span class="keywordtype">void</span> pal_Debugger();
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span><span class="preprocessor">    #ifdef TCAT_DEBUG</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span><span class="preprocessor">        #include &lt;intrin.h&gt;</span>
<a name="l00046"></a>00046 <span class="preprocessor">        #define PAL_DEBUG_BREAK __debugbreak();</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span><span class="preprocessor">    #else</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="preprocessor">        #define PAL_DEBUG_BREAK</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="preprocessor">    #endif // TCAT_DEBUG</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span><span class="preprocessor">#endif //WIN32</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span>
<a name="l00052"></a>00052 <span class="preprocessor">#ifdef __MACH__</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span><span class="preprocessor">    #define PAL_DEBUG_BREAK pal_Debugger();</span>
<a name="l00054"></a>00054 <span class="preprocessor"></span><span class="preprocessor">#endif // __MACH__</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span>
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 <span class="keyword">namespace </span>tcat
<a name="l00060"></a>00060 {
<a name="l00062"></a>00062 <span class="comment">//</span>
<a name="l00063"></a>00063 <span class="comment">//  to_string</span>
<a name="l00064"></a>00064 <span class="comment">//</span>
<a name="l00066"></a>00066 <span class="comment"></span><span class="comment">//\cond</span>
<a name="l00067"></a>00067 <span class="keyword">template</span> &lt;<span class="keyword">class</span> from_t&gt; std::string to_string(<span class="keyword">const</span> from_t&amp; t) 
<a name="l00068"></a>00068 { 
<a name="l00069"></a>00069     std::ostringstream os; 
<a name="l00070"></a>00070     os &lt;&lt; t;
<a name="l00071"></a>00071     <span class="keywordflow">return</span> os.str();
<a name="l00072"></a>00072 }
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 
<a name="l00077"></a>00077 <span class="comment">//</span>
<a name="l00078"></a>00078 <span class="comment">//  hex_to_string</span>
<a name="l00079"></a>00079 <span class="comment">//</span>
<a name="l00081"></a>00081 <span class="comment"></span><span class="comment">//</span>
<a name="l00082"></a>00082 <span class="keyword">template</span> &lt;<span class="keyword">class</span> from_t&gt; std::string hex_to_string(<span class="keyword">const</span> from_t&amp; t) 
<a name="l00083"></a>00083 { 
<a name="l00084"></a>00084     std::ostringstream os; 
<a name="l00085"></a>00085     os &lt;&lt; std::hex &lt;&lt; t;
<a name="l00086"></a>00086     <span class="keywordflow">return</span> os.str();
<a name="l00087"></a>00087 }
<a name="l00088"></a>00088 
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 
<a name="l00092"></a>00092 <span class="comment">//</span>
<a name="l00093"></a>00093 <span class="comment">//  from_string</span>
<a name="l00094"></a>00094 <span class="comment">//</span>
<a name="l00096"></a>00096 <span class="comment"></span><span class="comment">//</span>
<a name="l00097"></a>00097 <span class="keyword">template</span>&lt;<span class="keyword">class</span> to_t&gt; to_t from_string(<span class="keyword">const</span> std::string&amp; s)
<a name="l00098"></a>00098 {
<a name="l00099"></a>00099     to_t r = 0;
<a name="l00100"></a>00100     std::istringstream(s) &gt;&gt; (s.find(<span class="stringliteral">&quot;x&quot;</span>)==std::string::npos ? std::dec : std::hex) &gt;&gt; r;
<a name="l00101"></a>00101     <span class="keywordflow">return</span> r;
<a name="l00102"></a>00102 }
<a name="l00103"></a>00103 <span class="comment">//\endcond</span>
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 
<a name="l00107"></a>00107 <span class="keyword">namespace </span>pal
<a name="l00108"></a>00108 {
<a name="l00109"></a>00109 uint32  time()              throw(tcat::exception::base);           
<a name="l00110"></a>00110 uint64  time64()            throw(tcat::exception::base);           
<a name="l00111"></a>00111 uint64  time64wrap()        throw(tcat::exception::base);           
<a name="l00112"></a>00112 <span class="keywordtype">void</span>    delay   (uint32 ms) throw(tcat::exception::base);           
<a name="l00113"></a>00113 <span class="keywordtype">void</span>    swap32  (<span class="keywordtype">void</span>* data32, uint32 words32=1);                   
<a name="l00114"></a>00114 <span class="keywordtype">void</span>    swap32  (<span class="keywordtype">void</span>* dst32, const <span class="keywordtype">void</span>* src32, uint32 words32=1); 
<a name="l00115"></a>00115 }<span class="comment">// namespace pal</span>
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 
<a name="l00119"></a>00119 namespace dice
<a name="l00120"></a>00120 {
<a name="l00122"></a>00122 <span class="comment">//</span>
<a name="l00123"></a>00123 <span class="comment">//  exceptions</span>
<a name="l00124"></a>00124 <span class="comment">//</span>
<a name="l00126"></a>00126 <span class="comment"></span><span class="comment">//</span>
<a name="l00127"></a>00127 TCAT_EXCEPTION_DECLARE (xptn_internal,                  <a class="code" href="classtcat_1_1exception_1_1base.html">tcat::exception::base</a>,  <span class="stringliteral">&quot;Internal I/O platform abstraction layer error&quot;</span>);   
<a name="l00128"></a>00128 TCAT_EXCEPTION_DECLARE (xptn_internal_interface,        xptn_internal,          <span class="stringliteral">&quot;Internal interface mismatch&quot;</span>);                     
<a name="l00129"></a>00129 TCAT_EXCEPTION_DECLARE (xptn_resource,                  <a class="code" href="classtcat_1_1exception_1_1base.html">tcat::exception::base</a>,  <span class="stringliteral">&quot;System resource exhausted&quot;</span>);                       
<a name="l00130"></a>00130 TCAT_EXCEPTION_DECLARE (xptn_resource_timer,            <a class="code" href="classtcat_1_1exception_1_1base.html">tcat::exception::base</a>,  <span class="stringliteral">&quot;System did not implement high resolution timer&quot;</span>);  
<a name="l00131"></a>00131 TCAT_EXCEPTION_DECLARE (xptn_resource_file,             xptn_resource,          <span class="stringliteral">&quot;File open error&quot;</span>);                                 
<a name="l00132"></a>00132 TCAT_EXCEPTION_DECLARE (xptn_resource_firmware,         xptn_resource,          <span class="stringliteral">&quot;Invalid firmware binary&quot;</span>);                         
<a name="l00133"></a>00133 TCAT_EXCEPTION_DECLARE (xptn_driver,                    xptn_internal,          <span class="stringliteral">&quot;Driver not installed&quot;</span>);                            
<a name="l00134"></a>00134 TCAT_EXCEPTION_DECLARE (xptn_driver_version,            xptn_driver,            <span class="stringliteral">&quot;Driver version mismatch&quot;</span>);                         
<a name="l00135"></a>00135 TCAT_EXCEPTION_DECLARE (xptn_driver_access,             xptn_driver,            <span class="stringliteral">&quot;Driver access error&quot;</span>);                             
<a name="l00136"></a>00136 TCAT_EXCEPTION_DECLARE (xptn_driver_locked,             xptn_driver,            <span class="stringliteral">&quot;Driver streaming parameter locked&quot;</span>);               
<a name="l00137"></a>00137 TCAT_EXCEPTION_DECLARE (xptn_device,                    xptn_driver_access,     <span class="stringliteral">&quot;Device is not accessible&quot;</span>);                        
<a name="l00138"></a>00138 TCAT_EXCEPTION_DECLARE (xptn_device_access,             xptn_device,            <span class="stringliteral">&quot;Device access failed&quot;</span>);                            
<a name="l00139"></a>00139 TCAT_EXCEPTION_DECLARE (xptn_device_timeout,            xptn_device,            <span class="stringliteral">&quot;Device operation timeout&quot;</span>);                        
<a name="l00140"></a>00140 TCAT_EXCEPTION_DECLARE (xptn_device_firmware,           xptn_device,            <span class="stringliteral">&quot;Device firmware operation error&quot;</span>);                 
<a name="l00141"></a>00141 TCAT_EXCEPTION_DECLARE (xptn_device_firmware_timeout,   xptn_device_firmware,   <span class="stringliteral">&quot;Device firmware operation timeout&quot;</span>);               
<a name="l00142"></a>00142 <span class="comment">//TCAT_EXCEPTION_DECLARE (xptn_device_firmware_version, xptn_device_firmware,   &quot;Device firmware version mismatch&quot;);                ///&lt;    Device firmware version mismatch</span>
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 
<a name="l00145"></a>00145     
<a name="l00146"></a>00146 <span class="keyword">class </span>lock;
<a name="l00148"></a>00148 <span class="comment">//</span>
<a name="l00149"></a>00149 <span class="comment">//  tcat::dice::base</span>
<a name="l00150"></a>00150 <span class="comment">//</span>
<a name="l00157"></a><a class="code" href="classtcat_1_1dice_1_1base.html">00157</a> <span class="comment"></span><span class="keyword">class </span>base
<a name="l00158"></a>00158 {
<a name="l00159"></a>00159     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classtcat_1_1dice_1_1lock.html" title="Auto lock stack class.">lock</a>;
<a name="l00160"></a>00160     <span class="keyword">typedef</span> std::deque&lt;const base*&gt; base_list;
<a name="l00161"></a>00161 <span class="keyword">public</span>:
<a name="l00162"></a>00162             <span class="keywordtype">void</span>        _addref(<span class="keyword">const</span> base*owner=NULL);                 
<a name="l00163"></a>00163             <span class="keywordtype">bool</span>        _release(<span class="keyword">const</span> base*owner);                     
<a name="l00164"></a>00164 <span class="keyword">protected</span>:
<a name="l00165"></a><a class="code" href="classtcat_1_1dice_1_1base.html#ae04cf203ae308db7d38e1b65e014fe23">00165</a>                         base(): 
<a name="l00166"></a>00166                             m_are_all_objects_known_recursion(false),
<a name="l00167"></a>00167                             m_is_object_known_recursion(false),
<a name="l00168"></a>00168                             m_release_recursion(false)  {}              
<a name="l00169"></a>00169 <span class="comment">//  virtual             ~base();                                        ///&lt; Protected base class destructor (base is an abstract class and needs to be overwritten)</span>
<a name="l00170"></a>00170 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00171"></a>00171 <span class="preprocessor"></span>            <span class="keywordtype">bool</span>        test();                                         
<a name="l00172"></a>00172 <span class="preprocessor">#endif //WIN32</span>
<a name="l00173"></a>00173 <span class="preprocessor"></span><span class="keyword">private</span>:
<a name="l00174"></a>00174             <span class="keywordtype">bool</span>        _are_all_objects_known() <span class="keyword">const</span>;
<a name="l00175"></a>00175             <span class="keywordtype">bool</span>        _is_object_known(<span class="keyword">const</span> base*<span class="keywordtype">object</span>) <span class="keyword">const</span>;
<a name="l00176"></a>00176             <span class="keywordtype">void</span>        _lock()         throw(tcat::exception::base);   
<a name="l00177"></a>00177             <span class="keywordtype">void</span>        _unlock()       throw(tcat::exception::base);   
<a name="l00178"></a>00178 <span class="comment">//\cond</span>
<a name="l00179"></a>00179             base_list   m_owner_list;                                   
<a name="l00180"></a>00180             <span class="keywordtype">bool</span>        m_are_all_objects_known_recursion;
<a name="l00181"></a>00181             <span class="keywordtype">bool</span>        m_is_object_known_recursion;
<a name="l00182"></a>00182             <span class="keywordtype">bool</span>        m_release_recursion;                            
<a name="l00183"></a>00183 <span class="comment">//\endcond</span>
<a name="l00184"></a>00184 };
<a name="l00185"></a>00185 
<a name="l00186"></a>00186 
<a name="l00187"></a>00187 
<a name="l00189"></a>00189 <span class="comment">//</span>
<a name="l00190"></a>00190 <span class="comment">//  tcat::dice::lock</span>
<a name="l00191"></a>00191 <span class="comment">//</span>
<a name="l00202"></a><a class="code" href="classtcat_1_1dice_1_1lock.html">00202</a> <span class="comment"></span>class <a class="code" href="classtcat_1_1dice_1_1lock.html" title="Auto lock stack class.">lock</a>
<a name="l00203"></a>00203 {
<a name="l00204"></a>00204 <span class="keyword">public</span>: 
<a name="l00205"></a><a class="code" href="classtcat_1_1dice_1_1lock.html#a14eb3763e8dfa54573fdd12756c76403">00205</a>             <a class="code" href="classtcat_1_1dice_1_1lock.html#a14eb3763e8dfa54573fdd12756c76403" title="Lock object constructor: locks the paremeter object.">lock</a>(base*<span class="keywordtype">object</span>): m_object(object) { _lock(); }                                
<a name="l00206"></a><a class="code" href="classtcat_1_1dice_1_1lock.html#a8ed8e78e034d5066bade2786e6a6d63c">00206</a>             <a class="code" href="classtcat_1_1dice_1_1lock.html#a8ed8e78e034d5066bade2786e6a6d63c" title="Lock object destructor: un-locks the paremeter object.">~lock</a>()                             { _unlock(); }                              
<a name="l00207"></a><a class="code" href="classtcat_1_1dice_1_1lock.html#ac3347c8e7626e351e56ec902c43f7256">00207</a>     <span class="keywordtype">void</span>    <a class="code" href="classtcat_1_1dice_1_1lock.html#ac3347c8e7626e351e56ec902c43f7256" title="Reference object assignment.">operator=</a>(base* <span class="keywordtype">object</span>)             { _unlock(); m_object=object; }             
<a name="l00208"></a>00208 <span class="comment">//  void    operator=(const self&amp; reference)    { _unlock(); m_object=reference.m_object; } ///&lt; Reference object assignment</span>
<a name="l00209"></a>00209 <span class="comment">//  void    object(base*object)                 { m_object=object; }    ///&lt; To assign </span>
<a name="l00210"></a>00210 <span class="comment">//\cond</span>
<a name="l00211"></a>00211 <span class="keyword">private</span>:
<a name="l00212"></a>00212     <span class="keywordtype">void</span>    _lock()                             { <span class="keywordflow">if</span> (m_object) m_object-&gt;_lock(); }
<a name="l00213"></a>00213     <span class="keywordtype">void</span>    _unlock()                           { <span class="keywordflow">if</span> (m_object) m_object-&gt;_unlock(); }
<a name="l00214"></a>00214     base*   m_object;
<a name="l00215"></a>00215 <span class="comment">//\endcond</span>
<a name="l00216"></a>00216 };
<a name="l00217"></a>00217 
<a name="l00218"></a>00218 
<a name="l00219"></a>00219 
<a name="l00246"></a><a class="code" href="classtcat_1_1dice_1_1reference.html">00246</a> <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="keywordtype">object</span>_t=base&gt; <span class="keyword">class </span><a class="code" href="classtcat_1_1dice_1_1reference.html" title="Auto reference helper class.">reference</a>
<a name="l00247"></a>00247 {
<a name="l00248"></a>00248     <span class="keyword">typedef</span> <a class="code" href="classtcat_1_1dice_1_1reference.html" title="Auto reference helper class.">reference&lt;object_t&gt;</a> <span class="keyword">self</span>;
<a name="l00249"></a>00249 <span class="keyword">public</span>: 
<a name="l00250"></a><a class="code" href="classtcat_1_1dice_1_1reference.html#ab503781b3fcb230bcf154adc2bcdca1d">00250</a>                             <a class="code" href="classtcat_1_1dice_1_1reference.html#ab503781b3fcb230bcf154adc2bcdca1d" title="reference default constructor">reference</a>(): m_object(NULL), m_owner(NULL) {}                                       
<a name="l00251"></a><a class="code" href="classtcat_1_1dice_1_1reference.html#a3a39676659680c27227434a82d74ee03">00251</a>                             <a class="code" href="classtcat_1_1dice_1_1reference.html#a3a39676659680c27227434a82d74ee03" title="reference copy constructor">reference</a>   (<span class="keyword">const</span> <span class="keyword">self</span>&amp; <a class="code" href="classtcat_1_1dice_1_1reference.html" title="Auto reference helper class.">reference</a>) { m_object=<a class="code" href="classtcat_1_1dice_1_1reference.html" title="Auto reference helper class.">reference</a>.m_object; m_owner=<a class="code" href="classtcat_1_1dice_1_1reference.html" title="Auto reference helper class.">reference</a>.m_owner; <span class="keywordflow">if</span> (m_object) m_object-&gt;_addref(m_owner); }   
<a name="l00253"></a><a class="code" href="classtcat_1_1dice_1_1reference.html#a7dded15c1f00b44177460cf4ee5aaf37">00253</a>                             <a class="code" href="classtcat_1_1dice_1_1reference.html" title="Auto reference helper class.">reference</a>   (object_t*<span class="keywordtype">object</span>,base*owner=NULL): m_object(object), m_owner(owner)
<a name="l00254"></a>00254                                                                 { <span class="keywordflow">if</span> (m_object) m_object-&gt;_addref(m_owner); }   
<a name="l00255"></a><a class="code" href="classtcat_1_1dice_1_1reference.html#ab646038cf52811cb5f9ec1a1af443081">00255</a>                             <a class="code" href="classtcat_1_1dice_1_1reference.html#ab646038cf52811cb5f9ec1a1af443081" title="reference destructor">~reference</a>()                        { _release(); }                                 
<a name="l00256"></a><a class="code" href="classtcat_1_1dice_1_1reference.html#ae66c35c25ba46c26d346cdb671fb7368">00256</a>     <span class="keywordtype">void</span>                    <a class="code" href="classtcat_1_1dice_1_1reference.html#ae66c35c25ba46c26d346cdb671fb7368" title="Sets the owner for member references of base class derivates.">owner</a>       (base*owner)            { m_owner=owner; }                              
<a name="l00257"></a><a class="code" href="classtcat_1_1dice_1_1reference.html#ace30b416805da5e499679f18e3503255">00257</a>     object_t*   operator    -&gt;()                                { <span class="keywordflow">return</span> m_object; }                            
<a name="l00258"></a><a class="code" href="classtcat_1_1dice_1_1reference.html#af73a77312c5905ff8c8cbac9bed031ae">00258</a>     object_t*   operator    -&gt;()<span class="keyword"> const                          </span>{ <span class="keywordflow">return</span> m_object; }                            
<a name="l00259"></a><a class="code" href="classtcat_1_1dice_1_1reference.html#a8daeae7019f55881cdd29c0d7136c2da">00259</a>                 operator    object_t*()                         { <span class="keywordflow">return</span> m_object; }                            
<a name="l00260"></a><a class="code" href="classtcat_1_1dice_1_1reference.html#ae370ba0b280e62fca8863f140fab00a8">00260</a>                 operator    object_t*()<span class="keyword"> const                   </span>{ <span class="keywordflow">return</span> m_object; }                            
<a name="l00261"></a><a class="code" href="classtcat_1_1dice_1_1reference.html#a832df51f3b5855f6eaa36c03e20aed29">00261</a>     <span class="keywordtype">void</span>        operator    =(object_t* <span class="keywordtype">object</span>)                 { _release(); m_object=object; <span class="keywordflow">if</span> (m_object) m_object-&gt;_addref(m_owner); }              
<a name="l00262"></a><a class="code" href="classtcat_1_1dice_1_1reference.html#afc0161df54a0e2d3bf0b5c63454c7cb4">00262</a>     <span class="keywordtype">void</span>        operator    =(<span class="keyword">const</span> <span class="keyword">self</span>&amp; <a class="code" href="classtcat_1_1dice_1_1reference.html" title="Auto reference helper class.">reference</a>)            { _release(); m_object=<a class="code" href="classtcat_1_1dice_1_1reference.html" title="Auto reference helper class.">reference</a>.m_object; <span class="keywordflow">if</span> (m_object) m_object-&gt;_addref(m_owner); }  
<a name="l00263"></a>00263 
<a name="l00264"></a><a class="code" href="classtcat_1_1dice_1_1reference.html#a3790dd59666ce3a3ec56b9bf3cc50283">00264</a>     <span class="keyword">template</span> &lt;<span class="keyword">class</span> element_t&gt;  element_t*  <a class="code" href="classtcat_1_1dice_1_1reference.html#a3790dd59666ce3a3ec56b9bf3cc50283" title="Deprecated: lock and dynamic cast to list objects.">at</a>  (<span class="keywordtype">size_t</span> idx)    { lock lock(m_object); <span class="keywordflow">if</span> (m_object-&gt;size()&gt;idx) <span class="keywordflow">return</span> dynamic_cast&lt;element_t*&gt;((<a class="code" href="classtcat_1_1dice_1_1base.html">dice::base</a>*)m_object-&gt;at(idx)); <span class="keywordflow">else</span> <span class="keywordflow">return</span> NULL; }   
<a name="l00265"></a>00265 <span class="comment">//\cond</span>
<a name="l00266"></a>00266 <span class="keyword">protected</span>:
<a name="l00267"></a>00267     <span class="keywordtype">void</span>                    _release()                          {  <span class="keywordflow">if</span> (m_object &amp;&amp; m_object-&gt;_release(m_owner)) { <span class="keyword">delete</span> m_object; m_object=NULL;} }
<a name="l00268"></a>00268 <span class="keyword">private</span>:
<a name="l00269"></a>00269     object_t*   m_object;
<a name="l00270"></a>00270     base*       m_owner;
<a name="l00271"></a>00271 <span class="comment">//\endcond</span>
<a name="l00272"></a>00272 };
<a name="l00273"></a>00273 
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 
<a name="l00276"></a>00276 
<a name="l00277"></a>00277 <span class="preprocessor">#ifdef __MACH__</span>
<a name="l00278"></a>00278 <span class="preprocessor"></span><span class="comment">//\cond</span>
<a name="l00280"></a>00280 <span class="comment"></span><span class="comment">//</span>
<a name="l00281"></a>00281 <span class="comment">//  tcat::pal::mutex</span>
<a name="l00282"></a>00282 <span class="comment">//</span>
<a name="l00284"></a>00284 <span class="comment"></span><span class="comment">//</span>
<a name="l00285"></a>00285 <span class="keyword">class </span>mutex
<a name="l00286"></a>00286 {
<a name="l00287"></a>00287 <span class="keyword">public</span>:
<a name="l00288"></a>00288     mutex(pthread_mutex_t* pthread_mutex)   <span class="keywordflow">throw</span>(xptn_resource): m_pthread_mutex(pthread_mutex)    { TCAT_EXCEPTION_THROW (::pthread_mutex_lock(m_pthread_mutex), xptn_resource); }
<a name="l00289"></a>00289     ~mutex()                                throw(xptn_resource)                                    { TCAT_EXCEPTION_THROW (::pthread_mutex_unlock(m_pthread_mutex), xptn_resource); }
<a name="l00290"></a>00290 <span class="keyword">private</span>:
<a name="l00291"></a>00291     pthread_mutex_t* m_pthread_mutex;
<a name="l00292"></a>00292 };
<a name="l00293"></a>00293 <span class="comment">//\endcond</span>
<a name="l00294"></a>00294 <span class="preprocessor">#endif //__MACH__</span>
<a name="l00295"></a>00295 <span class="preprocessor"></span>
<a name="l00296"></a>00296 } <span class="comment">// namespace dice</span>
<a name="l00297"></a>00297 } <span class="comment">// namespace tcat</span>
</pre></div></div>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
	<head>
		<title>Platform Abstraction Layer API Documentation</title>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<link href="doxygen.css" rel="stylesheet" type="text/css">
	</head>
	<body>
		<hr size="1">
		<table width="100%" border="0" cellspacing="0" cellpadding="0">
			<tr>
				<td><small><font face="Verdana, Arial, Helvetica, sans-serif">(C) COPYRIGHT 2007-2013 TC Applied Technologies, Ltd. (ALL RIGHTS RESERVED)</font></small></td>
				<td colspan="2" align="right"><font face="Verdana, Arial, Helvetica, sans-serif">Compiled on 14 Jun 2013</font></td>
			</tr>
		</table>
	</body>
</html>
