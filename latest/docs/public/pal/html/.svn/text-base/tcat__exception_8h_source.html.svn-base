<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
	<head>
		<title>Platform Abstraction Layer API Documentation</title>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<link href="doxygen.css" rel="stylesheet" type="text/css">
	</head>
	<body>
		<table width="100%" border="0" cellspacing="0" cellpadding="0">
			<tr>
				<td><img src="images/TCAT.gif" width="399" height="64"></td>
				<td align="right">
					<div align="left">
						</div>
				</td>
				<td align="right">
					<div align="right">
						<b><font face="Verdana, Arial, Helvetica, sans-serif"><img src="images/dice_logo.gif" width="120" height="50"></font></b></div>
				</td>
			</tr>
		</table>
		<hr size="1">
	</body>
</html>
<!-- Generated by Doxygen 1.6.3 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.html"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>tcat_exception.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">//==============================================================================</span>
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// This confidential and proprietary software may be used only as authorised</span>
<a name="l00004"></a>00004 <span class="comment">// by a licensing agreement from TC Applied Technologies Ltd.</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// (C) COPYRIGHT 2004 - 2012 TC Applied Technologies Ltd. (ALL RIGHTS RESERVED)</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Unauthorized use, duplication or distribution of this software is  </span>
<a name="l00009"></a>00009 <span class="comment">// strictly prohibited by law.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// The entire notice above must be reproduced on all authorised copies and</span>
<a name="l00012"></a>00012 <span class="comment">// copies may only be made to the extent permitted by a licensing agreement</span>
<a name="l00013"></a>00013 <span class="comment">// from TC Applied Technologies Ltd.</span>
<a name="l00014"></a>00014 <span class="comment">//</span>
<a name="l00015"></a>00015 <span class="comment">//==============================================================================</span>
<a name="l00016"></a>00016 <span class="comment">//</span>
<a name="l00017"></a>00017 <span class="comment">//  TCAT exception handling</span>
<a name="l00018"></a>00018 <span class="comment">//</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#pragma once</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;exception&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifdef WIN32 </span>
<a name="l00028"></a>00028 <span class="preprocessor"></span>    <span class="comment">// IMPORTANT: .Net 2003 does not support exception specification. It accepts the</span>
<a name="l00029"></a>00029     <span class="comment">// syntax but no additional code is generateg. Additionally warning 4290 is </span>
<a name="l00030"></a>00030     <span class="comment">// posted. Since this can be very anoying, we disable it !</span>
<a name="l00031"></a>00031 <span class="preprocessor">    #pragma warning(disable: 4290)</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="keyword">namespace </span>tcat
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038 <span class="keyword">namespace </span>exception
<a name="l00039"></a>00039 {
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 
<a name="l00044"></a>00044 <span class="comment">//</span>
<a name="l00045"></a>00045 <span class="comment">//  tcat::exception::base</span>
<a name="l00046"></a>00046 <span class="comment">//</span>
<a name="l00051"></a><a class="code" href="classtcat_1_1exception_1_1base.html">00051</a> <span class="comment"></span><span class="keyword">class </span><a class="code" href="classtcat_1_1exception_1_1base.html">base</a>: <span class="keyword">virtual</span> <span class="keyword">public</span> std::exception
<a name="l00052"></a>00052 {
<a name="l00053"></a>00053 <span class="keyword">public</span>:
<a name="l00054"></a>00054                             <a class="code" href="classtcat_1_1exception_1_1base.html">base</a>(): m_filename(<span class="stringliteral">&quot;&quot;</span>), m_name(<span class="stringliteral">&quot;&quot;</span>), m_dbg_msg(<span class="stringliteral">&quot;&quot;</span>), m_usr_msg(<span class="stringliteral">&quot;&quot;</span>),  m_line(0) {}
<a name="l00055"></a>00055 <span class="comment">//                          base(const base&amp;base): m_filename(&quot;&quot;), m_name(&quot;&quot;), m_dbg_msg(&quot;&quot;), m_usr_msg(&quot;&quot;),  m_line(0) {}</span>
<a name="l00056"></a>00056                             <a class="code" href="classtcat_1_1exception_1_1base.html">base</a>(std::string <a class="code" href="classtcat_1_1exception_1_1base.html#a9290bd71581dc1023c3dc55158b51e8b" title="Return the source code filename where the exception occured.">filename</a>, <span class="keywordtype">int</span> <a class="code" href="classtcat_1_1exception_1_1base.html#a6e4fa87280bcaf1da56dd74ea92bc976" title="Return the line number of the source code where the exception occured.">line</a>, std::string <a class="code" href="classtcat_1_1exception_1_1base.html#a54c9617ac2ee5f30f12231676dda6e40" title="Return an additional debug message.">dbg_msg</a>, std::string <a class="code" href="classtcat_1_1exception_1_1base.html#af4fd12324e7b8baa9df296894ef810e4" title="Return the user displayable message.">usr_msg</a>, std::string <a class="code" href="classtcat_1_1exception_1_1base.html#af95275d5fe408cc7a83e6648cd2cb655" title="Return the exception name.">name</a>=<span class="stringliteral">&quot;base&quot;</span>);    
<a name="l00057"></a><a class="code" href="classtcat_1_1exception_1_1base.html#a65c6f71fbcac8a72f0461c2577a19ce3">00057</a>     <span class="keyword">virtual</span>                 <a class="code" href="classtcat_1_1exception_1_1base.html#a65c6f71fbcac8a72f0461c2577a19ce3" title="Exception base class destructor.">~base</a>() throw() {}                                                                                          
<a name="l00058"></a>00058 
<a name="l00059"></a>00059     <span class="keyword">static</span>  <span class="keywordtype">void</span>            <a class="code" href="classtcat_1_1exception_1_1base.html#a9ff593c62d23cb20d8d19d42148677d4" title="Enables exception handling for a named exception.">enable</a>  (<span class="keyword">const</span> std::string exceptions[]);   
<a name="l00060"></a>00060     
<a name="l00061"></a><a class="code" href="classtcat_1_1exception_1_1base.html#a9290bd71581dc1023c3dc55158b51e8b">00061</a>             std::string     <a class="code" href="classtcat_1_1exception_1_1base.html#a9290bd71581dc1023c3dc55158b51e8b" title="Return the source code filename where the exception occured.">filename</a>()<span class="keyword">  const   </span>{ <span class="keywordflow">return</span> m_filename; }  
<a name="l00062"></a><a class="code" href="classtcat_1_1exception_1_1base.html#a54c9617ac2ee5f30f12231676dda6e40">00062</a>             std::string     <a class="code" href="classtcat_1_1exception_1_1base.html#a54c9617ac2ee5f30f12231676dda6e40" title="Return an additional debug message.">dbg_msg</a>()<span class="keyword">   const   </span>{ <span class="keywordflow">return</span> m_dbg_msg; }   
<a name="l00063"></a><a class="code" href="classtcat_1_1exception_1_1base.html#af4fd12324e7b8baa9df296894ef810e4">00063</a>             std::string     <a class="code" href="classtcat_1_1exception_1_1base.html#af4fd12324e7b8baa9df296894ef810e4" title="Return the user displayable message.">usr_msg</a>()<span class="keyword">   const   </span>{ <span class="keywordflow">return</span> m_usr_msg; }   
<a name="l00064"></a><a class="code" href="classtcat_1_1exception_1_1base.html#af95275d5fe408cc7a83e6648cd2cb655">00064</a>             std::string     <a class="code" href="classtcat_1_1exception_1_1base.html#af95275d5fe408cc7a83e6648cd2cb655" title="Return the exception name.">name</a>()<span class="keyword">      const   </span>{ <span class="keywordflow">return</span> m_name; }      
<a name="l00065"></a><a class="code" href="classtcat_1_1exception_1_1base.html#a6e4fa87280bcaf1da56dd74ea92bc976">00065</a>             <span class="keywordtype">int</span>             <a class="code" href="classtcat_1_1exception_1_1base.html#a6e4fa87280bcaf1da56dd74ea92bc976" title="Return the line number of the source code where the exception occured.">line</a>()<span class="keyword">      const   </span>{ <span class="keywordflow">return</span> m_line; }      
<a name="l00066"></a>00066 <span class="comment">//\cond</span>
<a name="l00067"></a>00067 <span class="keyword">protected</span>:                                                  
<a name="l00068"></a>00068             std::string     m_filename;
<a name="l00069"></a>00069             std::string     m_name;
<a name="l00070"></a>00070             std::string     m_dbg_msg;
<a name="l00071"></a>00071             std::string     m_usr_msg;
<a name="l00072"></a>00072             <span class="keywordtype">int</span>             m_line;
<a name="l00073"></a>00073 <span class="comment">//\endcond</span>
<a name="l00074"></a>00074 };
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 
<a name="l00079"></a>00079 <span class="comment">//</span>
<a name="l00080"></a>00080 <span class="comment">//  TCAT_EXCEPTION_DECLARE</span>
<a name="l00081"></a>00081 <span class="comment">//</span>
<a name="l00083"></a>00083 <span class="comment"></span><span class="comment">//</span>
<a name="l00084"></a>00084 <span class="comment">//  macro to declare and define exceptions.</span>
<a name="l00085"></a>00085 <span class="comment">//</span>
<a name="l00086"></a>00086 <span class="preprocessor">#define TCAT_EXCEPTION_DECLARE(name,base,usr_msg_default)                                                                               \</span>
<a name="l00087"></a>00087 <span class="preprocessor">    class name: public base                                                                                                             \</span>
<a name="l00088"></a>00088 <span class="preprocessor">    {                                                                                                                                   \</span>
<a name="l00089"></a>00089 <span class="preprocessor">    public:                                                                                                                             \</span>
<a name="l00090"></a>00090 <span class="preprocessor">            name (std::string filename, int line, std::string dbg_msg, std::string usr_msg=usr_msg_default, std::string name=#name&quot;-&gt;&quot;#base):   \</span>
<a name="l00091"></a>00091 <span class="preprocessor">                base(filename,line,dbg_msg,usr_msg,name){}                                                                              \</span>
<a name="l00092"></a>00092 <span class="preprocessor">    virtual ~name() throw(){}                                                                                                           \</span>
<a name="l00093"></a>00093 <span class="preprocessor">    }                                                                                                                                   \</span>
<a name="l00094"></a>00094 <span class="preprocessor">                                 </span>
<a name="l00095"></a>00095 <span class="preprocessor"></span>
<a name="l00096"></a>00096 
<a name="l00098"></a>00098 <span class="comment">//</span>
<a name="l00099"></a>00099 <span class="comment">//  TCAT_EXCEPTION_THROW</span>
<a name="l00100"></a>00100 <span class="comment">//</span>
<a name="l00102"></a>00102 <span class="comment"></span><span class="comment">//</span>
<a name="l00103"></a>00103 <span class="comment">//  macro to conditionally throw an exception</span>
<a name="l00104"></a>00104 <span class="comment">//</span>
<a name="l00105"></a>00105 <span class="preprocessor">#define TCAT_EXCEPTION_THROW(condition,exception)   \</span>
<a name="l00106"></a>00106 <span class="preprocessor">    ((condition) ? throw exception(__FILE__, __LINE__, std::string(TCAT_FUNCTION) + &quot;: \&quot;&quot; #condition &quot;\&quot;&quot;):(void)0)</span>
<a name="l00107"></a>00107 <span class="preprocessor"></span>
<a name="l00108"></a>00108 
<a name="l00109"></a>00109 
<a name="l00111"></a>00111 <span class="comment">//</span>
<a name="l00112"></a>00112 <span class="comment">//  TCAT_EXCEPTION_TRY</span>
<a name="l00113"></a>00113 <span class="comment">//</span>
<a name="l00115"></a>00115 <span class="comment"></span><span class="comment">//</span>
<a name="l00116"></a>00116 <span class="comment">//  macro to rethrow an exception from within a more describing context </span>
<a name="l00117"></a>00117 <span class="comment">//</span>
<a name="l00118"></a>00118 <span class="preprocessor">#define TCAT_EXCEPTION_TRY(cmd,base,exception)  \</span>
<a name="l00119"></a>00119 <span class="preprocessor">    try { cmd; } catch(base tmp) { throw exception(__FILE__, __LINE__, std::string(TCAT_FUNCTION) + &quot;: \&quot;&quot; #cmd &quot;\&quot; from: [&quot; + tmp.name() + &quot;: &quot; + tmp.usr_msg() + &quot;; &quot; + tmp.dbg_msg() + &quot;;&quot; + tmp.filename() + </span><span class="comment">/* &quot;; line &quot; + tmp.line() +*/</span> &quot;]&quot;); }
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 }<span class="comment">// namespace exception</span>
<a name="l00124"></a>00124 }<span class="comment">// namespace tcat</span>
</pre></div></div>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
	<head>
		<title>Platform Abstraction Layer API Documentation</title>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<link href="doxygen.css" rel="stylesheet" type="text/css">
	</head>
	<body>
		<hr size="1">
		<table width="100%" border="0" cellspacing="0" cellpadding="0">
			<tr>
				<td><small><font face="Verdana, Arial, Helvetica, sans-serif">(C) COPYRIGHT 2007-2013 TC Applied Technologies, Ltd. (ALL RIGHTS RESERVED)</font></small></td>
				<td colspan="2" align="right"><font face="Verdana, Arial, Helvetica, sans-serif">Compiled on 14 Jun 2013</font></td>
			</tr>
		</table>
	</body>
</html>
