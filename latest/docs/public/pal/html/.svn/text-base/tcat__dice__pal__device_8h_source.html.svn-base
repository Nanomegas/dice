<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
	<head>
		<title>Platform Abstraction Layer API Documentation</title>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<link href="doxygen.css" rel="stylesheet" type="text/css">
	</head>
	<body>
		<table width="100%" border="0" cellspacing="0" cellpadding="0">
			<tr>
				<td><img src="images/TCAT.gif" width="399" height="64"></td>
				<td align="right">
					<div align="left">
						</div>
				</td>
				<td align="right">
					<div align="right">
						<b><font face="Verdana, Arial, Helvetica, sans-serif"><img src="images/dice_logo.gif" width="120" height="50"></font></b></div>
				</td>
			</tr>
		</table>
		<hr size="1">
	</body>
</html>
<!-- Generated by Doxygen 1.6.3 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.html"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>tcat_dice_pal_device.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">//==============================================================================</span>
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// This confidential and proprietary software may be used only as authorised</span>
<a name="l00004"></a>00004 <span class="comment">// by a licensing agreement from TC Applied Technologies Ltd.</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// (C) COPYRIGHT 2004 - 2012 TC Applied Technologies Ltd. (ALL RIGHTS RESERVED)</span>
<a name="l00007"></a>00007 <span class="comment">//</span>
<a name="l00008"></a>00008 <span class="comment">// Unauthorized use, duplication or distribution of this software is  </span>
<a name="l00009"></a>00009 <span class="comment">// strictly prohibited by law.</span>
<a name="l00010"></a>00010 <span class="comment">//</span>
<a name="l00011"></a>00011 <span class="comment">// The entire notice above must be reproduced on all authorised copies and</span>
<a name="l00012"></a>00012 <span class="comment">// copies may only be made to the extent permitted by a licensing agreement</span>
<a name="l00013"></a>00013 <span class="comment">// from TC Applied Technologies Ltd.</span>
<a name="l00014"></a>00014 <span class="comment">//</span>
<a name="l00015"></a>00015 <span class="comment">//==============================================================================</span>
<a name="l00016"></a>00016 <span class="comment">//</span>
<a name="l00017"></a>00017 <span class="comment">//  dice pal device</span>
<a name="l00018"></a>00018 <span class="comment">//</span>
<a name="l00019"></a>00019 <span class="preprocessor">#pragma once</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#include &lt;deque&gt;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &quot;tcat_dice_pal.h&quot;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &quot;../../interface/tcat_dice_firmware.h&quot;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;../../interface/tcat_dice_firmware_loader.h&quot;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="keyword">namespace </span>tcat
<a name="l00028"></a>00028 {
<a name="l00029"></a>00029 <span class="keyword">namespace </span>dice
<a name="l00030"></a>00030 {
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">class </span>bus_impl;
<a name="l00036"></a>00036 <span class="comment">//</span>
<a name="l00037"></a>00037 <span class="comment">//  device</span>
<a name="l00038"></a>00038 <span class="comment">//</span>
<a name="l00043"></a><a class="code" href="classtcat_1_1dice_1_1device.html">00043</a> <span class="comment"></span><span class="keyword">class </span><a class="code" href="classtcat_1_1dice_1_1device.html">device</a>: <span class="keyword">public</span> <a class="code" href="classtcat_1_1dice_1_1base.html">base</a>
<a name="l00044"></a>00044 {
<a name="l00045"></a>00045     <span class="keyword">typedef</span> <a class="code" href="classtcat_1_1dice_1_1base.html">base</a> <a class="code" href="classtcat_1_1dice_1_1base.html">super</a>;
<a name="l00046"></a>00046     <span class="keyword">typedef</span> std::deque&lt;std::string&gt; SYNC_NAMES;
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="keyword">public</span>:
<a name="l00049"></a><a class="code" href="classtcat_1_1dice_1_1device_1_1channel.html">00049</a>     <span class="keyword">class </span><a class="code" href="classtcat_1_1dice_1_1device_1_1channel.html" title="device channel containing name and isoc stream related information for one audio...">channel</a>: <span class="keyword">public</span> std::string   
<a name="l00050"></a>00050     {
<a name="l00051"></a>00051     <span class="keyword">public</span>:
<a name="l00052"></a><a class="code" href="classtcat_1_1dice_1_1device_1_1channel.html#afbdd25f765b975f20a1e6d81db6857af">00052</a>                     <a class="code" href="classtcat_1_1dice_1_1device_1_1channel.html#afbdd25f765b975f20a1e6d81db6857af" title="constructore">channel</a>(std::string name, uint32 <a class="code" href="classtcat_1_1dice_1_1device_1_1channel.html#a39597676f7b6b0c3294c3646f6c96f1f" title="Return the isoc channel.">isoc</a>, uint32 <a class="code" href="classtcat_1_1dice_1_1device_1_1channel.html#a70fa8fdab03313c44b3067f1bee8f03d" title="Return AVS sequence number in the isoc channel.">avs</a>): std::string(name), m_isoc(isoc), m_avs(avs) {}  
<a name="l00053"></a><a class="code" href="classtcat_1_1dice_1_1device_1_1channel.html#a39597676f7b6b0c3294c3646f6c96f1f">00053</a>         uint32      <a class="code" href="classtcat_1_1dice_1_1device_1_1channel.html#a39597676f7b6b0c3294c3646f6c96f1f" title="Return the isoc channel.">isoc</a>()<span class="keyword">  const   </span>{ <span class="keywordflow">return</span> m_isoc; }  
<a name="l00054"></a><a class="code" href="classtcat_1_1dice_1_1device_1_1channel.html#a70fa8fdab03313c44b3067f1bee8f03d">00054</a>         uint32      <a class="code" href="classtcat_1_1dice_1_1device_1_1channel.html#a70fa8fdab03313c44b3067f1bee8f03d" title="Return AVS sequence number in the isoc channel.">avs</a>()<span class="keyword">   const   </span>{ <span class="keywordflow">return</span> m_avs; }   
<a name="l00055"></a>00055     <span class="keyword">private</span>:
<a name="l00056"></a>00056     <span class="comment">//\cond</span>
<a name="l00057"></a>00057         uint32      m_isoc;
<a name="l00058"></a>00058         uint32      m_avs;
<a name="l00059"></a>00059     <span class="comment">//\endcond</span>
<a name="l00060"></a>00060     };
<a name="l00061"></a><a class="code" href="classtcat_1_1dice_1_1device.html#a3b06818bd97db222717c04cd57185b76">00061</a>     <span class="keyword">typedef</span> std::deque&lt;channel&gt; <a class="code" href="classtcat_1_1dice_1_1device.html#a3b06818bd97db222717c04cd57185b76" title="Internal channel representation class.">channel_list</a>;       
<a name="l00062"></a>00062 
<a name="l00063"></a>00063                                 <a class="code" href="classtcat_1_1dice_1_1device.html#a95ab42e0b2e738637d3414347fa5559c" title="First stage device class construction.">device</a>();                                                                                       
<a name="l00064"></a>00064     <span class="keyword">virtual</span>                     <a class="code" href="classtcat_1_1dice_1_1device.html#a08545ac77231c68a27c32633a9730a33" title="Device class desctruction.">~device</a>();                                                                                      
<a name="l00065"></a>00065     <span class="keyword">static</span>  std::string         <a class="code" href="classtcat_1_1dice_1_1device.html#a8ffd6b578549bda87b2d936f3f5823be" title="Returns the product type description as specified in the customization for the given...">type</a>                (uint32 product_id);                                                        
<a name="l00066"></a><a class="code" href="classtcat_1_1dice_1_1device.html#a8ffd6b578549bda87b2d936f3f5823be">00066</a>             std::string         <a class="code" href="classtcat_1_1dice_1_1device.html#a8ffd6b578549bda87b2d936f3f5823be" title="Returns the product type description as specified in the customization for the given...">type</a>()                                                      { <span class="keywordflow">return</span> <a class="code" href="classtcat_1_1dice_1_1device.html#a8ffd6b578549bda87b2d936f3f5823be" title="Returns the product type description as specified in the customization for the given...">type</a>(uint32((<a class="code" href="classtcat_1_1dice_1_1device.html#acd7f03cf554b394292fb82bc3f3dfdf2" title="Returns the device GUID. Format: | 24bit OUI (0x166) | 8bit Cat || 10bit product...">guid64</a>()&gt;&gt;kTCAT_DICE_GUID64_PRODUCT_ID_SHIFT)&amp;kTCAT_DICE_GUID64_PRODUCT_ID_MASK)); }  
<a name="l00067"></a>00067     <span class="keyword">virtual</span> <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#ab825390871b9cba005a0ada9dd6f4ba9" title="Second stage device creation.">create</a>              (<a class="code" href="classtcat_1_1dice_1_1bus__impl.html">bus_impl</a>* <a class="code" href="classtcat_1_1dice_1_1bus.html">bus</a>, <span class="keyword">const</span> <a class="code" href="structtcat_1_1dice_1_1_d_e_v_i_c_e___i_n_f_o.html">DEVICE_INFO</a>&amp; info)    <span class="keywordflow">throw</span>(<a class="code" href="classtcat_1_1exception_1_1base.html">tcat::exception::base</a>);   
<a name="l00068"></a>00068     <span class="keyword">virtual</span> <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#a1f8a5a1d1b0665cee44bcd61219babb1" title="Updates device state.">fetch</a>               (<span class="keyword">const</span> <a class="code" href="structtcat_1_1dice_1_1_d_e_v_i_c_e___i_n_f_o.html">DEVICE_INFO</a>&amp; info, DEVICE_NOTIFICATION notification=kDeviceNotificationNone)
<a name="l00069"></a>00069                                                                                                 throw(tcat::exception::<a class="code" href="classtcat_1_1dice_1_1base.html">base</a>);   
<a name="l00070"></a>00070     virtual <span class="keywordtype">bool</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#a816981acffacb6582d88944d1680fc21" title="Notifies about a general device state change. Overwrite this to handle device state...">update</a>();                                                                                       
<a name="l00071"></a><a class="code" href="classtcat_1_1dice_1_1device.html#a5394d43b538684a985553efc2145b212">00071</a>     virtual <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#a5394d43b538684a985553efc2145b212" title="Notifies about the arrival of a valid (completly built and updated) device.">mount</a>()                                                     {}                                  
<a name="l00072"></a><a class="code" href="classtcat_1_1dice_1_1device.html#ac714744477d11eb68bfd2792d80d34b8">00072</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#ac714744477d11eb68bfd2792d80d34b8" title="Notifies about the removal of the device (physically disconnected).">unmount</a>()                                                   {}                                  
<a name="l00073"></a><a class="code" href="classtcat_1_1dice_1_1device.html#a745e934bc837a42262162f0767ad69ba">00073</a>     <span class="keyword">virtual</span> <a class="code" href="classtcat_1_1dice_1_1reference.html" title="Auto reference helper class.">reference&lt;bus_impl&gt;</a> <a class="code" href="classtcat_1_1dice_1_1device.html#a745e934bc837a42262162f0767ad69ba" title="Returns the bus_impl reference into this device is mounted to.">bus</a>()                                                       { <span class="keywordflow">return</span> m_bus; }                   
<a name="l00074"></a><a class="code" href="classtcat_1_1dice_1_1device.html#acd7f03cf554b394292fb82bc3f3dfdf2">00074</a>     <span class="keyword">const</span>   uint64&amp;             <a class="code" href="classtcat_1_1dice_1_1device.html#acd7f03cf554b394292fb82bc3f3dfdf2" title="Returns the device GUID. Format: | 24bit OUI (0x166) | 8bit Cat || 10bit product...">guid64</a>()<span class="keyword">                                        const       </span>{ <span class="keywordflow">return</span> m_cache[0].info.guid64; }  
<a name="l00075"></a><a class="code" href="classtcat_1_1dice_1_1device.html#aaf3be5d6f669e3d6ae6252970689178b">00075</a>     <span class="keyword">const</span>   uint32              <a class="code" href="classtcat_1_1dice_1_1device.html#aaf3be5d6f669e3d6ae6252970689178b" title="Returns the device index identifying the device in the driver internal device structure...">idx</a>()<span class="keyword">                                           const       </span>{ <span class="keywordflow">return</span> m_cache[0].info.idx; }     
<a name="l00076"></a><a class="code" href="classtcat_1_1dice_1_1device.html#ab049d9d895b44de80eacd17b300a3b6c">00076</a>     <span class="keyword">const</span>   std::string         <a class="code" href="classtcat_1_1dice_1_1device.html#ab049d9d895b44de80eacd17b300a3b6c" title="Returns the device nickname.">nickname</a>()<span class="keyword">                                      const       </span>{ <span class="keywordflow">return</span> *(uint32*)m_cache[0].info.nickname==0xffffffff?<span class="stringliteral">&quot;&quot;</span>:m_cache[0].info.nickname; }
<a name="l00077"></a>00077             <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#ab049d9d895b44de80eacd17b300a3b6c" title="Returns the device nickname.">nickname</a>            (<span class="keyword">const</span> std::string name)            <span class="keywordflow">throw</span>(<a class="code" href="classtcat_1_1exception_1_1base.html">tcat::exception::base</a>);           
<a name="l00078"></a><a class="code" href="classtcat_1_1dice_1_1device.html#a49d02a738d6e42148e4d42c948711cf3">00078</a>     <span class="keyword">const</span>   <a class="code" href="structtcat_1_1dice_1_1_d_e_v_i_c_e___i_n_f_o.html#aff8965970498776231dd3dd67669cc97" title="Device state information.">DEVICE_INFO::STATE</a>  <a class="code" href="classtcat_1_1dice_1_1device.html#a49d02a738d6e42148e4d42c948711cf3" title="Returns the device state.">state</a>()<span class="keyword">                                         const       </span>{ <span class="keywordflow">return</span> m_cache[0].info.state; }   
<a name="l00079"></a><a class="code" href="classtcat_1_1dice_1_1device.html#aaae123eba2f1343b8c87efea9bb4e723">00079</a>     <span class="keyword">const</span>   <span class="keywordtype">bool</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#aaae123eba2f1343b8c87efea9bb4e723" title="Returns whether the device supports the EAP protocol.">supports_eap</a>()<span class="keyword">                                  const       </span>{ <span class="keywordflow">return</span> (m_cache[0].info.capabilities &amp; 0x00000004) != 0; }  
<a name="l00080"></a><a class="code" href="classtcat_1_1dice_1_1device.html#ae4b649b35870145b7ca6fb2a98b127bd">00080</a>     <span class="keyword">const</span>   <a class="code" href="classtcat_1_1dice_1_1device.html#a3b06818bd97db222717c04cd57185b76" title="Internal channel representation class.">channel_list</a>&amp;       <a class="code" href="classtcat_1_1dice_1_1device.html#ae4b649b35870145b7ca6fb2a98b127bd" title="Returns the in(true) or out(false) channel container.">channels</a>            (<span class="keywordtype">bool</span> input)<span class="keyword">                const       </span>{ <span class="keywordflow">return</span> m_channels[input];}        
<a name="l00081"></a><a class="code" href="classtcat_1_1dice_1_1device.html#ad3ba02f07e6e7f733fd3d6e767b7a29e">00081</a>     <span class="keyword">const</span>   <a class="code" href="structtcat_1_1dice_1_1_s_e_q_u_e_n_c_e_s.html">SEQUENCES</a>&amp;          <a class="code" href="classtcat_1_1dice_1_1device.html#ad3ba02f07e6e7f733fd3d6e767b7a29e" title="Returns the number of the in(true) or out(false) AUDIO or MIDI channels (sequences)...">sequence</a>            (<span class="keywordtype">bool</span> input, uint32 isoc)<span class="keyword">   const       </span>{ <span class="keywordflow">return</span> m_squ[input][isoc];}       
<a name="l00082"></a><a class="code" href="classtcat_1_1dice_1_1device.html#a23cee7ba75fa81ab213f99a92cbabe9e">00082</a>     <span class="keyword">const</span>   uint32              <a class="code" href="classtcat_1_1dice_1_1device.html#a23cee7ba75fa81ab213f99a92cbabe9e" title="Returns the meassured sample rate.">clock</a>()<span class="keyword">                                         const       </span>{ <span class="keywordflow">return</span> m_cache[0].clock.clock; }  
<a name="l00083"></a><a class="code" href="classtcat_1_1dice_1_1device.html#a03c9c33e047b44c8a65e23ab63d96bed">00083</a>     <span class="keyword">const</span>   <span class="keywordtype">bool</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#a03c9c33e047b44c8a65e23ab63d96bed" title="Returns wether the device is locked or not.">locked</a>()<span class="keyword">                                        const       </span>{ <span class="keywordflow">return</span> m_cache[0].clock.status &amp; kStatusLocked; }                     
<a name="l00084"></a><a class="code" href="classtcat_1_1dice_1_1device.html#a3ee83047d5adc5098869d1ee01ab72b3">00084</a>     <span class="keyword">const</span>   <span class="keywordtype">bool</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#a3ee83047d5adc5098869d1ee01ab72b3" title="Returns the transmitter locked state.">tx_locked</a>           (uint32 stream)<span class="keyword">             const       </span>{ <span class="keywordflow">return</span> m_cache[0].clock.tx_locked[stream] &amp; 1;}
<a name="l00085"></a><a class="code" href="classtcat_1_1dice_1_1device.html#a6203959c9a75b21af6182c76dfab67de">00085</a>     <span class="keyword">const</span>   EX_STATUS           <a class="code" href="classtcat_1_1dice_1_1device.html#a6203959c9a75b21af6182c76dfab67de" title="Returns the extended status locked information.">rx_locked</a>()<span class="keyword">                                     const       </span>{ <span class="keywordflow">return</span> EX_STATUS(m_cache[0].<a class="code" href="classtcat_1_1dice_1_1device.html#a23cee7ba75fa81ab213f99a92cbabe9e" title="Returns the meassured sample rate.">clock</a>.ex_status &amp; kExStatusLockedMask); } 
<a name="l00086"></a>00086     <span class="keyword">const</span>   EX_STATUS           <a class="code" href="classtcat_1_1dice_1_1device.html#ae402382f1dc2a9f592f79f0cb5c4e3b2" title="Returns the extended status slip information.">rx_slipped</a>()                                            throw(tcat::exception::<a class="code" href="classtcat_1_1dice_1_1base.html">base</a>);           
<a name="l00087"></a><a class="code" href="classtcat_1_1dice_1_1device.html#a4bbf685b11a0d8dd55105abaa836b9b4">00087</a>     const   <a class="code" href="uniontcat_1_1dice_1_1_c_l_o_c_k___s_y_n_c___c_a_p_s.html">CLOCK_SYNC_CAPS</a>     <a class="code" href="classtcat_1_1dice_1_1device.html#a4bbf685b11a0d8dd55105abaa836b9b4" title="Returns the static combination of device clock and sync capabilty bit maps.">clock_sync_caps</a>()<span class="keyword">                               const       </span>{ <span class="keywordflow">return</span> m_clock_sync_caps; }       
<a name="l00088"></a><a class="code" href="classtcat_1_1dice_1_1device.html#acf61d53a845e0f5641b3228ffb374fe7">00088</a>     <span class="keyword">const</span>   SYNC_NAMES          <a class="code" href="classtcat_1_1dice_1_1device.html#acf61d53a845e0f5641b3228ffb374fe7" title="Returns sync name container.">sync_names</a>()<span class="keyword">                                    const       </span>{ <span class="keywordflow">return</span> m_sync_names; }            
<a name="l00089"></a>00089             <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#aa0195c2de2916b8355f2b40284f32ea1" title="Issues an OHCI asynchronous read command.">ohci_read</a>           (uint32 offset, uint32* pData32, uint32 nData32=1)          
<a name="l00090"></a>00090                                                                                 <span class="keyword">const</span>   throw(tcat::exception::<a class="code" href="classtcat_1_1dice_1_1base.html">base</a>);           
<a name="l00091"></a>00091             <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#acacc05ae1e778622d3a333fc371c70f1" title="Issues an OHCI asynchronous write command.">ohci_write</a>          (uint32 offset, const uint32* pData32, uint32 nData32=1)    
<a name="l00092"></a>00092                                                                                 const   throw(tcat::exception::base);           
<a name="l00093"></a><a class="code" href="classtcat_1_1dice_1_1device.html#a1e9ddd49a1c69c4748f3f9c675558b98">00093</a>     const   uint32              <a class="code" href="classtcat_1_1dice_1_1device.html#a1e9ddd49a1c69c4748f3f9c675558b98" title="Returns the number of MIDI (IN=false; OUT=true) ports.">midi_ports</a>          (<span class="keywordtype">bool</span> out)<span class="keyword">                  const       </span>{ <span class="keywordflow">return</span> m_midi_ports[out]; }       
<a name="l00094"></a><a class="code" href="classtcat_1_1dice_1_1device.html#a6e632546005c39d5d0204d218932e498">00094</a>     <span class="keyword">const</span>   uint32              <a class="code" href="classtcat_1_1dice_1_1device.html#a6e632546005c39d5d0204d218932e498" title="Returns the number isochronous streams (IN=false; OUT=true).">isoc_streams</a>        (<span class="keywordtype">bool</span> out)<span class="keyword">                  const       </span>{ <span class="keywordflow">return</span> m_isocs[out]; }            
<a name="l00095"></a><a class="code" href="classtcat_1_1dice_1_1device.html#a86e9f87a0cb23f0e3a9abf0a0da6f8e3">00095</a>     <span class="keyword">const</span>   uint32              <a class="code" href="classtcat_1_1dice_1_1device.html#a86e9f87a0cb23f0e3a9abf0a0da6f8e3" title="Firmware loader protocol capabilities.">firmware_capabilities</a>()<span class="keyword">                         const       </span>{ <span class="keywordflow">return</span> m_fwl_capabilities; }      
<a name="l00096"></a>00096             <span class="keywordtype">bool</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#a43d02559466638871b94e8fa76c590e2" title="Return firmware info.">firmware_info</a>       (uint32 sector, FL_GET_IMAGE_DESC_RETURN&amp; info) <span class="keyword">const</span>;                      
<a name="l00097"></a>00097     <span class="keyword">static</span>  FL_GET_APP_INFO_RETURN  <a class="code" href="classtcat_1_1dice_1_1device.html#a43d02559466638871b94e8fa76c590e2" title="Return firmware info.">firmware_info</a>   (<span class="keyword">const</span> std::string filename)        <span class="keywordflow">throw</span>(<a class="code" href="classtcat_1_1exception_1_1base.html">tcat::exception::base</a>);           
<a name="l00098"></a><a class="code" href="classtcat_1_1dice_1_1device.html#a43d02559466638871b94e8fa76c590e2">00098</a>     <span class="keyword">const</span>   FL_GET_APP_INFO_RETURN&amp; <a class="code" href="classtcat_1_1dice_1_1device.html#a43d02559466638871b94e8fa76c590e2" title="Return firmware info.">firmware_info</a>()<span class="keyword">                             const       </span>{ <span class="keywordflow">return</span> m_fw_info; }               
<a name="l00099"></a>00099             uint32              <a class="code" href="classtcat_1_1dice_1_1device.html#a13c235d395fa115f1aad4cba8749ded1" title="Uploads the firmware to the device, does not burn it yet and returns the file size...">firmware_upload</a>     (<span class="keyword">const</span> std::string filename, <span class="keyword">const</span> std::string sector, <span class="keywordtype">bool</span> check32=<span class="keyword">false</span>)
<a name="l00100"></a>00100                                                                                         throw(tcat::exception::<a class="code" href="classtcat_1_1dice_1_1base.html">base</a>);           
<a name="l00101"></a>00101             uint32              <a class="code" href="classtcat_1_1dice_1_1device.html#a13c235d395fa115f1aad4cba8749ded1" title="Uploads the firmware to the device, does not burn it yet and returns the file size...">firmware_upload</a>     (const <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *pData, uint32 filesize, const std::<span class="keywordtype">string</span> sector, <span class="keywordtype">bool</span> check32)
<a name="l00102"></a>00102                                                                                         throw(tcat::exception::base);           
<a name="l00103"></a>00103             uint32              <a class="code" href="classtcat_1_1dice_1_1device.html#aed4b3cd5fcfd612c1d018866554ea39d" title="Downloads the complete flash image from the device to a file.">firmware_download</a>   (const std::<span class="keywordtype">string</span> filename)        throw(tcat::exception::base);           
<a name="l00104"></a>00104             uint32              <a class="code" href="classtcat_1_1dice_1_1device.html#aed4b3cd5fcfd612c1d018866554ea39d" title="Downloads the complete flash image from the device to a file.">firmware_download</a>   (std::<span class="keywordtype">string</span> * buf, const std::<span class="keywordtype">string</span> sector)       throw(tcat::exception::base);           
<a name="l00105"></a>00105             <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#a1a9b5f4ded09c5f09f741206a6b6a68f" title="Deletes the specified image from the device flash.">firmware_delete</a>     (const std::<span class="keywordtype">string</span> sector)          throw(tcat::exception::base);           
<a name="l00106"></a>00106             <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#a8f01cf1fb95275db0df1c02e925ad978" title="Creates a flash image.">firmware_create</a>     (const std::<span class="keywordtype">string</span> sector, uint32 filesize, int32 exec_addr=0x30000, int32 entry_addr=0x30040) throw(tcat::exception::base);    
<a name="l00107"></a>00107             <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#a9ce493fe9e1d24be97b364a5dcb4b1d9" title="Resets the device.">firmware_reset</a>()                                        throw(tcat::exception::base);           
<a name="l00108"></a>00108             <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#a6eb620a0d54f6de8cf472d208ae30201" title="Set device test mode.">firmware_test</a>(uint32 test_mode)                         throw(tcat::exception::base);           
<a name="l00109"></a>00109 <span class="preprocessor">#ifdef TCAT_DEBUG</span>
<a name="l00110"></a>00110 <span class="preprocessor"></span>            DD_GLOBAL           _dbg_global()                                   <span class="keyword">const</span>   throw(tcat::exception::base)    { DD_GLOBAL global; <a class="code" href="classtcat_1_1dice_1_1device.html#aa0195c2de2916b8355f2b40284f32ea1" title="Issues an OHCI asynchronous read command.">ohci_read</a>(m_spaces[kSpaceGlobal].offset, (uint32*)&amp;global, std::min&lt;uint32&gt;(m_spaces[kSpaceGlobal].size32,<span class="keyword">sizeof</span>(global)&gt;&gt;2)); <span class="keywordflow">return</span> global; }
<a name="l00111"></a>00111             IO&lt;kTCAT_DICE_TX&gt;   _dbg_tx()                                       <span class="keyword">const</span>   throw(tcat::exception::base)    { IO&lt;kTCAT_DICE_TX&gt; tx; <a class="code" href="classtcat_1_1dice_1_1device.html#aa0195c2de2916b8355f2b40284f32ea1" title="Issues an OHCI asynchronous read command.">ohci_read</a>(m_spaces[kSpaceTx].offset, (uint32*)&amp;tx, std::min&lt;uint32&gt;(m_spaces[kSpaceTx].size32,<span class="keyword">sizeof</span>(tx)&gt;&gt;2)); <span class="keywordflow">return</span> tx; }
<a name="l00112"></a>00112             IO&lt;kTCAT_DICE_RX&gt;   _dbg_rx()                                       <span class="keyword">const</span>   throw(tcat::exception::base)    { IO&lt;kTCAT_DICE_RX&gt; rx; <a class="code" href="classtcat_1_1dice_1_1device.html#aa0195c2de2916b8355f2b40284f32ea1" title="Issues an OHCI asynchronous read command.">ohci_read</a>(m_spaces[kSpaceRx].offset, (uint32*)&amp;rx, std::min&lt;uint32&gt;(m_spaces[kSpaceRx].size32,<span class="keyword">sizeof</span>(rx)&gt;&gt;2)); <span class="keywordflow">return</span> rx; }
<a name="l00113"></a>00113     <span class="keyword">const</span>   SPACE&amp;              _dbg_space(SPACES space)<span class="keyword">                        const       </span>{ <span class="keywordflow">return</span> m_spaces[space]; }
<a name="l00114"></a>00114 <span class="preprocessor">#endif</span>
<a name="l00115"></a>00115 <span class="preprocessor"></span>
<a name="l00116"></a>00116 <span class="keyword">protected</span>:
<a name="l00117"></a>00117     <span class="keyword">virtual</span> <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#a9bd035d9ea7f76e5cd222d78d958e4da" title="Notifies about an RX configuration change and extracts the isoc RX channel information...">fetch_rx</a>()                                              throw(tcat::exception::base);           
<a name="l00118"></a>00118     virtual <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#aa3c0e4235bdb18062e178a1f1a2dc7ec" title="Notifies about an TX configuration change and extracts the isoc TX channel information...">fetch_tx</a>()                                              throw(tcat::exception::base);           
<a name="l00119"></a>00119 
<a name="l00120"></a><a class="code" href="classtcat_1_1dice_1_1device.html#acafc9cebda055d312117ff911b28680b">00120</a>     virtual <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#acafc9cebda055d312117ff911b28680b" title="Notifies about device clock (sample rate) change at a locked device - obtain new...">update_clock</a>()                                              {}                                  
<a name="l00121"></a><a class="code" href="classtcat_1_1dice_1_1device.html#aafd7d7a00d89b5f514f17d861ffd3f66">00121</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#aafd7d7a00d89b5f514f17d861ffd3f66" title="Notifies about an extended lock status change - obtain new state with rx_locked()...">update_rx_locked</a>()                                          {}                                  
<a name="l00122"></a><a class="code" href="classtcat_1_1dice_1_1device.html#aafda8546c980df3999cfe3dfd5a91ec9">00122</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#aafda8546c980df3999cfe3dfd5a91ec9" title="Notifies about the locked state of the device has changed - obtain new state with...">update_locked</a>()                                             {}                                  
<a name="l00123"></a><a class="code" href="classtcat_1_1dice_1_1device.html#a990fd2307c1b4b87ae987710b0e6b285">00123</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#a990fd2307c1b4b87ae987710b0e6b285" title="Notifies about an TX status change - obtain new state with tx_locked().">update_tx_locked</a>()                                          {}                                  
<a name="l00124"></a><a class="code" href="classtcat_1_1dice_1_1device.html#afe968298e8281a563762c6d3b35eba0c">00124</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#afe968298e8281a563762c6d3b35eba0c" title="Notifies about a nickname change - obtain new nickname with nickname().">update_nickname</a>()                                           {}                                  
<a name="l00125"></a><a class="code" href="classtcat_1_1dice_1_1device.html#aa7b3bf361da8c5ef5868a27da9e982b3">00125</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#aa7b3bf361da8c5ef5868a27da9e982b3" title="Notifies about a device index change (actually another device with a lower GUID has...">update_idx</a>()                                                {}                                  
<a name="l00126"></a><a class="code" href="classtcat_1_1dice_1_1device.html#a1164002292a1d4834fddaf39369ebc74">00126</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#a1164002292a1d4834fddaf39369ebc74" title="Notifies about a device state change - obtain new state with state().">update_state</a>()                                              {}                                  
<a name="l00127"></a><a class="code" href="classtcat_1_1dice_1_1device.html#abbfbf52f40f13a96ae5c31e1329e3e4f">00127</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#abbfbf52f40f13a96ae5c31e1329e3e4f" title="Notifies about an RX configuration change and extracts the isoc RX channel information...">update_rx</a>()                                                 {}                                  
<a name="l00128"></a><a class="code" href="classtcat_1_1dice_1_1device.html#af7378d6a318e7f13ddd6f04bb72ccd11">00128</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#af7378d6a318e7f13ddd6f04bb72ccd11" title="Notifies about an TX configuration change and extracts the isoc TX channel information...">update_tx</a>()                                                 {}                                  
<a name="l00129"></a><a class="code" href="classtcat_1_1dice_1_1device.html#a47eb58acaa322a47675b4aa97c11915b">00129</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#a47eb58acaa322a47675b4aa97c11915b" title="Notifies about a device user event.">update_user</a>(DEVICE_NOTIFICATION notification)               {}                                  
<a name="l00130"></a><a class="code" href="classtcat_1_1dice_1_1device.html#aaca1e10545dbb8d69b01f2a89aa2d4ba">00130</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#aaca1e10545dbb8d69b01f2a89aa2d4ba" title="Firmware operation progress callback.">firmware_progress</a>   (uint32 percent, FL_OP_ENUM operation)<span class="keyword">  const   </span>{}                          
<a name="l00131"></a>00131             <span class="keywordtype">void</span>                <a class="code" href="classtcat_1_1dice_1_1device.html#a1f61c8de0c124063c28eb0b8284de4df" title="Internal firmware package communication protocol helper.">firmware_package</a>    (FL_OP_ENUM operation, uint32 timeout, <span class="keyword">const</span> <span class="keywordtype">void</span>* package=NULL, uint32 size32=1, uint32 percent=0, uint32 percent_last=0)
<a name="l00132"></a>00132                                                                                         <span class="keyword">const</span>   throw(tcat::exception::base);   
<a name="l00133"></a>00133 <span class="comment">//\cond</span>
<a name="l00134"></a>00134             struct
<a name="l00135"></a>00135             {
<a name="l00136"></a>00136                 <a class="code" href="structtcat_1_1dice_1_1_d_e_v_i_c_e___i_n_f_o.html">DEVICE_INFO</a>         info;               
<a name="l00137"></a>00137                 ioctl::DEVICE_CLOCK <a class="code" href="classtcat_1_1dice_1_1device.html#a23cee7ba75fa81ab213f99a92cbabe9e" title="Returns the meassured sample rate.">clock</a>;              
<a name="l00138"></a>00138             } m_cache[2];                               
<a name="l00139"></a>00139 <span class="keyword">private</span>:
<a name="l00140"></a>00140             reference&lt;bus_impl&gt; m_bus;                  
<a name="l00141"></a>00141 <span class="preprocessor">            #ifdef __MACH__</span>
<a name="l00142"></a>00142 <span class="preprocessor"></span><span class="preprocessor">            #ifdef TCAT_DICE_AVC</span>
<a name="l00143"></a>00143 <span class="preprocessor"></span>            <span class="keywordtype">void</span>**              m_avc_interface;        
<a name="l00144"></a>00144 <span class="preprocessor">            #endif//TCAT_DICE_AVC</span>
<a name="l00145"></a>00145 <span class="preprocessor"></span>            <span class="keywordtype">void</span>**              m_fw_interface;         
<a name="l00146"></a>00146 <span class="preprocessor">            #endif//__MACH__</span>
<a name="l00147"></a>00147 <span class="preprocessor"></span>            SPACE               m_spaces[kSpaces];      
<a name="l00148"></a>00148             DEVICE_NOTIFICATION m_notification;         
<a name="l00149"></a>00149             <a class="code" href="classtcat_1_1dice_1_1device.html#a3b06818bd97db222717c04cd57185b76" title="Internal channel representation class.">channel_list</a>        m_channels[2];          
<a name="l00150"></a>00150             SEQUENCES           m_squ[2][4];            
<a name="l00151"></a>00151             CLOCK_SYNC_CAPS     m_clock_sync_caps;      
<a name="l00152"></a>00152             SYNC_NAMES          m_sync_names;           
<a name="l00153"></a>00153             uint32              m_isocs[2];             
<a name="l00154"></a>00154             uint32              m_midi_ports[2];        
<a name="l00155"></a>00155             FL_GET_APP_INFO_RETURN  m_fw_info;          
<a name="l00156"></a>00156             uint32              m_fwl_capabilities;     
<a name="l00157"></a>00157 <span class="comment">//\endcond</span>
<a name="l00158"></a>00158 };
<a name="l00159"></a>00159 <span class="keyword">typedef</span> dice::reference&lt;device&gt; device_ref;                     
<a name="l00160"></a>00160 
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 } <span class="comment">// namespace dice</span>
<a name="l00164"></a>00164 } <span class="comment">// namespace tcat</span>
</pre></div></div>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
	<head>
		<title>Platform Abstraction Layer API Documentation</title>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<link href="doxygen.css" rel="stylesheet" type="text/css">
	</head>
	<body>
		<hr size="1">
		<table width="100%" border="0" cellspacing="0" cellpadding="0">
			<tr>
				<td><small><font face="Verdana, Arial, Helvetica, sans-serif">(C) COPYRIGHT 2007-2013 TC Applied Technologies, Ltd. (ALL RIGHTS RESERVED)</font></small></td>
				<td colspan="2" align="right"><font face="Verdana, Arial, Helvetica, sans-serif">Compiled on 14 Jun 2013</font></td>
			</tr>
		</table>
	</body>
</html>
