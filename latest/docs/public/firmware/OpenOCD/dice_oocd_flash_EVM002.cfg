# dice_oocd_flash.cfg
# configures the Dice CPU target for writing flash
#  invoke on the openocd.exe command-line after the interface configuration file
#  assumes the flash file completeFlashImage.bin is in the same directory

# specify the ports to use for gdb and telnet sessions
gdb_port 3333
telnet_port 4444

# set up variables
if { [info exists CHIPNAME] } {	
   set  _CHIPNAME $CHIPNAME    
} else {	 
   set  _CHIPNAME tcat-dice
}

if { [info exists ENDIAN] } {	
   set  _ENDIAN $ENDIAN    
} else {	 
   set  _ENDIAN little
}

if { [info exists CPUTAPID ] } {
   set _CPUTAPID $CPUTAPID
} else {
  # force an error till we get a good number
  set _CPUTAPID 0x1f0f0f0f
}

# set up maximum JTAG clock rate.
# if programming doesnt work (e.g. target doesnt stay in RESET) change JTAG speed
# optimal speed for high-speed interfaces, such as JTAGkey2
jtag_khz 15000
# jtag_khz 6000

# use combined on interfaces or targets that can't set TRST/SRST separately
reset_config trst_and_srst srst_pulls_trst
jtag_nsrst_delay	250
jtag_nsrst_delay	250

#jtag scan chain
jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

#target configuration
set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm7tdmi-s_r4

# working area for fast transfers
# this uses internal SRAM, if remapped properly after 'init' below
$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0 -work-area-size 0x4000 -work-area-backup 0

# speed-ups
arm7_9 dcc_downloads enable
arm7_9 fast_memory_access enable

# flash memories on DICE EVM's are cfi type
# flash bank <driver> <base> <size> <chip_width> <bus_width>
flash bank 0 cfi 0x04000000 0x200000 2 2 $_TARGETNAME

# enter normal command mode, allowing memory read/write comands
init

# set up DICE chip selects, memories, etc.
source dice_oocd_init.cfg

# Remap address zero to the on-chip RAM, which will be used for the flash programming routine and its buffers
mww 0xc0000008 0x00000001

# probe for the flash and write the file
flash probe 0
echo " "
echo "** programming flash"
echo "** working area warnings are normal"
flash write_image erase completeFlashImage_EVM002.bin 0x04000000 bin

echo " "
echo "** done. reset the board to run from flash."
echo " "

# stop OpenOCD
shutdown 


